# Routr's image repo and pull policy
# We recommend using 'Always'
image:
  repository: fonoster/routr
  pullPolicy: Always
  tag: ""

# Enable to use obtain remote access to the
# server via `rctl` or the restful api.
#
# The service type defaults to ClusterIP allowing you
# to use Ingress. But you could replace with other service type
adminService:
  enabled: true
  name: api
  type: ClusterIP
  port: 4567
  annotations: {}
  externalIPs: []

# Use this service to enable UDP access to the server's signaling
# capabilities. Keep in mind that this will create the service for you
# But the UDP protocol must also be enabled(default) in the server.
udpSignalingService:
  enabled: true
  externalTrafficPolicy: Local
  name: sipudp
  type: ClusterIP
  port: 5060
  annotations: {}
  externalIPs: []

# Use this service to enable TCP access to the server's signaling
# capabilities. Keep in mind that this will create the service for you
# But the TCP protocol must also be enabled(default) in the server.
tcpSignalingService:
  enabled: true
  externalTrafficPolicy: Local
  name: siptcp
  type: ClusterIP
  ports:
  - name: siptcp
    port: 5060
  annotations: {}
  externalIPs: []

# Certificates Management
certs:
  provided: false
  name: routr-cert

# Routr internal configurations
routr:
  userAgent: ""
  bindAddr: ""
  externAddr: ""
  localnets: []
  recordRoute: false
  useToAsAOR: false
  patchRequestURI: false
  registrarIntf: Internal
  ex_kafka:
    enabled: false
  ex_uniqueGatewayPerHostPort: false
  ex_convertTelToE164: false
  javaOpts: ""
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  ex_rtpEngine:
    enabled: false
  accessControlList:
    deny: []
    allow: []
  restService:
    bindAddr: 0.0.0.0
    port: 4567
    minThreads: 8
    maxThreads: 200
    timeoutMillis: 5000
    unsecured: false
    keyStore: ""
    trustStore: ""
    keyStorePassword: ""
    trustStorePassword: ""
  securityContext:
    keyStore: ""
    trustStore: ""
    keyStorePassword: ""
    debugging: false
    client:
      keyStoreType: jks
      protocols: [TLSv1.2]
  logLevel: info

redis:
  usePassword: false
  cluster:
    enabled: false
  persistence:
    enabled: true
    mountPath: /bitnami/redis
    size: 5Gi

replicaCount: 1
nameOverride: ""
fullnameOverride: ""
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
resources:
  limits: {}
  requests: {}
nodeSelector: {}
tolerations: []
affinity: {}
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
