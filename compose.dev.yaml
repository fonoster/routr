# Development overlay for Routr
services:
  edgeport01:
    container_name: edgeport01
    build:
      context: .
      dockerfile: ./mods/edgeport/Dockerfile
    environment:
      LOGS_LEVEL: verbose
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    networks:
      public:
        ipv4_address: 10.111.220.2
      internal:
        ipv4_address: 10.111.221.2
        aliases:
          - sip01.edgeport.net
    volumes:
      - ./config/log4j2.yaml:/etc/routr/log4j2.yaml

  edgeport02:
    container_name: edgeport02
    build:
      context: .
      dockerfile: ./mods/edgeport/Dockerfile
    environment:
      LOGS_LEVEL: verbose
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    networks:
      public:
        ipv4_address: 10.111.220.3
      internal:
        ipv4_address: 10.111.221.3
        aliases:
          - sip02.edgeport.net
    volumes:
      - ./config/log4j2.yaml:/etc/routr/log4j2.yaml

  dispatcher:
    container_name: dispatcher
    build: ./mods/dispatcher
    environment:
      LOGS_LEVEL: verbose
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    networks:
      internal:
        ipv4_address: 10.111.221.4

  location:
    container_name: location
    build: ./mods/location
    environment:
      LOGS_LEVEL: verbose
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    networks:
      internal:
        ipv4_address: 10.111.221.5

  connect:
    container_name: connect
    build: ./mods/connect
    environment:
      LOGS_LEVEL: verbose
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    networks:
      internal:
        ipv4_address: 10.111.221.6

  apiserver:
    container_name: apiserver
    build: ./mods/simpledata
    environment:
      LOGS_LEVEL: verbose
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    networks:
      internal:
        ipv4_address: 10.111.221.8

  requester:
    container_name: requester
    build:
      context: .
      dockerfile: ./mods/requester/Dockerfile
    environment:
      LOGS_LEVEL: verbose
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    networks:
      internal:
        ipv4_address: 10.111.221.9

  registry:
    container_name: registry
    build: ./mods/registry
    environment:
      LOGS_LEVEL: verbose
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    networks:
      internal:
        ipv4_address: 10.111.221.10

  # RTPEngine requires of network mode "host" to work properly. However, this option doesn't work on OSX.
  # For development, we are opening a few ports to the host machine. For production, you must use 
  # the network_mode: host which works on Linux.
  rtpengine:
    image: fonoster/rtpengine:latest
    restart: always
    # Uncomment the following line for production
    # network_mode: host
    environment:
      # Set DOCKER_HOST_ADDRESS to an IP address that is reachable to the SIP clients
      PUBLIC_IP: ${DOCKER_HOST_ADDRESS}
      PORT_MIN: 10000
      PORT_MAX: 10020
      LOG_LEVEL: 8
    ports:
      - 22222:22222/udp
      - 10000-10020:10000-10020/udp

  redis:
    image: bitnami/redis:7.4.1
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: yes
    ports:
      - 6379:6379

  postgres:
    image: bitnami/postgresql:17.2.0
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TZ: UTC
      PGTZ: UTC
    ports:
      - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data

  adminer:
    image: adminer
    restart: always
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    ports:
      - 8080:8080

  # Tracing monitoring
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.54
    ports:
      - 16686:16686
      - 14268:14268
      - 14250:14250
    networks:
      internal:

  #
  # SIP End to End Test (SEET) compliance test for SIPConnect v1.1 support
  # docker compose -f compose.yaml -f compose.dev.yaml up \
  #  --build --abort-on-container-exit --exit-code-from compliance compliance
  #
  compliance:
    container_name: compliance
    image: fonoster/seet:1.2.0
    depends_on:
      - edgeport01
      - edgeport02
      - dispatcher
      - registry
      - requester
      - apiserver
      - connect
      - location
    environment:
      SCENARIOS: /seet.json
    ports:
      - 7060:7060/udp
    volumes:
      - ./etc/seet.json/:/seet.json
      - ./etc/scenarios:/scenarios
    networks:
      internal:
        ipv4_address: 10.111.221.22
      public:
        ipv4_address: 10.111.220.22
        aliases:
          - sip.provider.net

volumes:
  db:
    driver: local

networks:
  public:
    driver: "bridge"
    ipam:
      config:
        - subnet: 10.111.220.0/24
  internal:
    driver: "bridge"
    ipam:
      config:
        - subnet: 10.111.221.0/24
