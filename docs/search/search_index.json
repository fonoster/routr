{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Use the left-hand to navigate to find topics of interest.","title":"Welcome"},{"location":"#welcome","text":"Use the left-hand to navigate to find topics of interest.","title":"Welcome"},{"location":"concepts/","text":"The following are some key concepts, including some of the essential routing strategies implemented in Routr. Intra-Domain Routing \u00b6 Intra-Domain Routing(IDR) offers a mechanism for user segmentation. For a small or medium size company, a single domain may be sufficient, but for a multinational or an IP telephony service provider, it may not. For a small company with less than 50 users, you may define a domain sip.domain.com . Regardless of how many offices they have, the chances are that they still need to communicate with each other, and therefore we keep them in the same Domain. Needless to say, that in a company this size you are not going to run out usernames. A multinational company like Walmart have thousands of stores that operate independently. In such a case, you need a multi-domain setting. For example, you may define the domains sip.0001.walmart.com and sip.0002.walmart.com , and... you get the idea. Double Agents \u00b6 Yes, you can have double Agents, or Agents that exist in a multi-domain setup. For this to work, you need to do is include the Domain in the Agent's spec.domain[*] list. In the example before, John can send or receive calls from both domains, while the rest of the Agents are only allowed to call within the Domain. Single Domain Example \u00b6 The following yaml configuration shows a simple setup, involving one Domain and two Agents: Domain configuration yaml - apiVersion: v1beta1 kind: Domain metadata: name: Local Office spec: context: domainUri: sip.local Agents configuration yaml - apiVersion: v1beta1 kind: Agent metadata: name: John Doe spec: credentials: username: john secret: '1234' domains: [sip.local] - kind: Agent apiVersion: v1beta1 metadata: name: Janie Doe spec: credentials: username: janie secret: '1234' domains: [sip.local] Voila! That's all the configuration you need for intra-domain communication. For calls outside the Domain, see \"Domain Egress Routing\" section and to receive calls from the PSTN check section \"Domain Ingress Routing.\" To configure your sip devices use the information found in config/agents.yml . Also, you must use the Host/IP of Routr server as the OUTBOUND PROXY of your sip device. Routing Rules The following rules apply to Intra-Domain Routing: Agents can only call other Agents in the same Domain Agents must belong to a Domain Agents Are not allowed to send a Digest username different than the username in the From-Header Domain Ingress Routing \u00b6 In Routr, the process of receiving a call from PSTN to a Domain is as Domain Ingress Routing(DIR) and it is done using a Gateway resource. The yaml file config/gateways.yml contains the Gateways. The following example shows a typical Gateway configuration. yaml - apiVersion: v1beta1 kind: Gateway metadata: name: Plain Old Phone Service Provider spec: regService: host: sip.provider.net credentials: username: 'gwuser' secret: gwsecret transport: udp registries: [sip.nyc.provider.net] # These are additional registrars within the provider's network You also need to define Numbers. Routr uses the Address Of Record(AOR) to routes incoming calls from a Number to an existing Agent or Peer. The AOR must be available in the location service at the time of the call, or the call gets rejected. Please examine the following example: yaml - apiVersion: v1beta1 kind: Number metadata: gwRef: dd50baa4 geoInfo: city: Columbus, GA country: USA countryISOCode: US spec: location: telUri: 'tel:17066041487' aorLink: 'sip:john@sip.local' # This is the sip uri of an agent that is expected to be logged in Easy right? Any incoming call is routed from this Gateway and Number to \"Jhon Doe\" @ Ocean New York. Routing Rules The spec.location block of a Number resource configuration, determines the path of an inbound call from the PSTN. The aorLink refers to an Address of Record(Agent or Peer) that is available in the location service . Domain Egress Routing \u00b6 Domain Egress Routing(DER) is the way that Routr deals with a call request to a callee that exists in the Public Switched Telephone Network(PSTN) and not in the callers' Domain. The EgressPolicy consists of a rule , and a numberRef defined in the spec.context section of Domains resources. The rule and numberRef is defined as follows: rule is a regex to match callee in the call request. The location service uses this only after a search in the caller's Domain first. numberRef is the identifier of the Number that will to route the call. The Number must already exist and have a parent Gateway. Routing Rules Agents can only perform outbound calls using the Egress Policy of their Domains. Peers Routing \u00b6 Peers are very similar to Agents, but they are not bound to any Domain, and usually, collocated in the same network with Routr. A typical case is peering with Asterisk, where Asterisk acts as a Media Server and Routr provides the signaling. Peers can perform inbound/outbound signaling within the network without any special consideration since they exist inside the Location Service just like Agents. So it is possible to perform signaling from Peer to Peer, Peer to Agent. The same is true for Inbound from the PSTN. For example, we can redirect incoming calls from the PSTN using the spec.location settings in the numbers.yml configuration file. Routing Rules Agents are not allowed to call Peers. A future version of the Peer resource might feature a spec.acceptFrom.* field to allow calls from Domains or specific Agents.","title":"Concepts"},{"location":"concepts/#intra-domain-routing","text":"Intra-Domain Routing(IDR) offers a mechanism for user segmentation. For a small or medium size company, a single domain may be sufficient, but for a multinational or an IP telephony service provider, it may not. For a small company with less than 50 users, you may define a domain sip.domain.com . Regardless of how many offices they have, the chances are that they still need to communicate with each other, and therefore we keep them in the same Domain. Needless to say, that in a company this size you are not going to run out usernames. A multinational company like Walmart have thousands of stores that operate independently. In such a case, you need a multi-domain setting. For example, you may define the domains sip.0001.walmart.com and sip.0002.walmart.com , and... you get the idea.","title":"Intra-Domain Routing"},{"location":"concepts/#double-agents","text":"Yes, you can have double Agents, or Agents that exist in a multi-domain setup. For this to work, you need to do is include the Domain in the Agent's spec.domain[*] list. In the example before, John can send or receive calls from both domains, while the rest of the Agents are only allowed to call within the Domain.","title":"Double Agents"},{"location":"concepts/#single-domain-example","text":"The following yaml configuration shows a simple setup, involving one Domain and two Agents: Domain configuration yaml - apiVersion: v1beta1 kind: Domain metadata: name: Local Office spec: context: domainUri: sip.local Agents configuration yaml - apiVersion: v1beta1 kind: Agent metadata: name: John Doe spec: credentials: username: john secret: '1234' domains: [sip.local] - kind: Agent apiVersion: v1beta1 metadata: name: Janie Doe spec: credentials: username: janie secret: '1234' domains: [sip.local] Voila! That's all the configuration you need for intra-domain communication. For calls outside the Domain, see \"Domain Egress Routing\" section and to receive calls from the PSTN check section \"Domain Ingress Routing.\" To configure your sip devices use the information found in config/agents.yml . Also, you must use the Host/IP of Routr server as the OUTBOUND PROXY of your sip device. Routing Rules The following rules apply to Intra-Domain Routing: Agents can only call other Agents in the same Domain Agents must belong to a Domain Agents Are not allowed to send a Digest username different than the username in the From-Header","title":"Single Domain Example"},{"location":"concepts/#domain-ingress-routing","text":"In Routr, the process of receiving a call from PSTN to a Domain is as Domain Ingress Routing(DIR) and it is done using a Gateway resource. The yaml file config/gateways.yml contains the Gateways. The following example shows a typical Gateway configuration. yaml - apiVersion: v1beta1 kind: Gateway metadata: name: Plain Old Phone Service Provider spec: regService: host: sip.provider.net credentials: username: 'gwuser' secret: gwsecret transport: udp registries: [sip.nyc.provider.net] # These are additional registrars within the provider's network You also need to define Numbers. Routr uses the Address Of Record(AOR) to routes incoming calls from a Number to an existing Agent or Peer. The AOR must be available in the location service at the time of the call, or the call gets rejected. Please examine the following example: yaml - apiVersion: v1beta1 kind: Number metadata: gwRef: dd50baa4 geoInfo: city: Columbus, GA country: USA countryISOCode: US spec: location: telUri: 'tel:17066041487' aorLink: 'sip:john@sip.local' # This is the sip uri of an agent that is expected to be logged in Easy right? Any incoming call is routed from this Gateway and Number to \"Jhon Doe\" @ Ocean New York. Routing Rules The spec.location block of a Number resource configuration, determines the path of an inbound call from the PSTN. The aorLink refers to an Address of Record(Agent or Peer) that is available in the location service .","title":"Domain Ingress Routing"},{"location":"concepts/#domain-egress-routing","text":"Domain Egress Routing(DER) is the way that Routr deals with a call request to a callee that exists in the Public Switched Telephone Network(PSTN) and not in the callers' Domain. The EgressPolicy consists of a rule , and a numberRef defined in the spec.context section of Domains resources. The rule and numberRef is defined as follows: rule is a regex to match callee in the call request. The location service uses this only after a search in the caller's Domain first. numberRef is the identifier of the Number that will to route the call. The Number must already exist and have a parent Gateway. Routing Rules Agents can only perform outbound calls using the Egress Policy of their Domains.","title":"Domain Egress Routing"},{"location":"concepts/#peers-routing","text":"Peers are very similar to Agents, but they are not bound to any Domain, and usually, collocated in the same network with Routr. A typical case is peering with Asterisk, where Asterisk acts as a Media Server and Routr provides the signaling. Peers can perform inbound/outbound signaling within the network without any special consideration since they exist inside the Location Service just like Agents. So it is possible to perform signaling from Peer to Peer, Peer to Agent. The same is true for Inbound from the PSTN. For example, we can redirect incoming calls from the PSTN using the spec.location settings in the numbers.yml configuration file. Routing Rules Agents are not allowed to call Peers. A future version of the Peer resource might feature a spec.acceptFrom.* field to allow calls from Domains or specific Agents.","title":"Peers Routing"},{"location":"administration/webconsole/","text":"The Web Console \u2014 WC for short \u2014 is an additional tool for remote control of Routr server that ships with the Command-Line tool. The Web Console accesses your Routr server remotely using a Restful API. How to install the Web Console? \u00b6 The WC ships with the Command-Line tool. You do not need to install it separately. Launching the Web Console \u00b6 To launch the WC, first, make sure you have a Routr server running. You are also going to have to install the Command-Line tool. To launch the server run the following command: bash rctl proxy The WC re-uses the credentials of your Command-Line Tool Does the WC affect the server's performance? \u00b6 No. The WC is launched on the client side. It is not part of the Routr server and does not affect its performance.","title":"Web Console"},{"location":"administration/webconsole/#how-to-install-the-web-console","text":"The WC ships with the Command-Line tool. You do not need to install it separately.","title":"How to install the Web Console?"},{"location":"administration/webconsole/#launching-the-web-console","text":"To launch the WC, first, make sure you have a Routr server running. You are also going to have to install the Command-Line tool. To launch the server run the following command: bash rctl proxy The WC re-uses the credentials of your Command-Line Tool","title":"Launching the Web Console"},{"location":"administration/webconsole/#does-the-wc-affect-the-servers-performance","text":"No. The WC is launched on the client side. It is not part of the Routr server and does not affect its performance.","title":"Does the WC affect the server's performance?"},{"location":"administration/cli/cheatsheet/","text":"The rctl is a command-line interface for running commands against a Routr server. This overview covers rctl syntax, describes the command operations and provides common examples. For details about each command, including all the supported flags and subcommands, see the reference documentation below. This tool ships separately from the Routr server. Installation \u00b6 To get the Routr Command-Line Tool run the following command: bash npm install -g routr-ctl The command-line tool is now globally accessible. Login to a Routr server \u00b6 To login to a Routr server, use the login command. bash rctl login https://127.0.0.1:4567/api/{apiVersion} -u admin -p changeit The current API version is v1beta1 Syntax \u00b6 Use the following syntax to run rctl commands from your terminal window: rctl COMMAND [REF] [flags] where COMMAND , subcommand REF , and flags are: COMMAND : Specifies the operation that you want to perform on one or more resources. For example, create, get, delete, locate(loc). subcommand : Specifies the resource type. Resource types are case-sensitive, and you can specify the singular, plural, or abbreviated forms. For example, the following commands produce the same output: $ rctl get gateway gweef506 $ rctl get gateways gweef506 $ rctl get gw gweef506 REF : Specifies the reference to the resource. References are case-sensitive. For a full list, omit the reference. For example, $ rctl get agents . flags : Specifies optional flags. For example, you can use the --filter to further reduce the output of the get command . The --filter flag uses JsonPath to perform the filtering. The root is always '$'. All you need to add is the path to the property and the filter operators. For example: ``` This returns all the Numbers in Gateway 'gweef506' \u00b6 rctl get numbers --filter \"@.metadata.gwRef=='gweef506'\" ``` If you need help, just run rctl --help from the terminal window. ``` $ rctl --help usage: rctl [-h] [-v] COMMAND ... A tool for the management of a Routr instance named arguments: -h, --help show this help message and exit -v, --version print version information and quit Commands: COMMAND get display a list of resources create (crea) creates new resource(s) apply apply changes over existing resource(s) delete (del) delete an existing resource(s) locate (loc) locate sip device(s) registry (reg) shows gateways registrations proxy run a proxy to the server (beta) login sets connection info logout clear session credentials logs dumps all the available system logs restart restarts the engine stop stops the engine ping checks engine status version (ver) obtain rctl's version information config manage routr configuration Run 'rctl COMMAND --help' for more information on a command ``` Important: Some commands (i.e.: create, delete) are not available in the default implementation of the resources modules. Only persistent implementations support these commands. Examples: Common operations \u00b6 Use the following set of examples to help you familiarize yourself with running the commonly used rctl operations: rctl locate or rctl loc - Locate a sip device registered on the Routr server // Locate all Sip Devices registered against a Routr server $ rctl loc rctl registry or rctl reg - Shows Gateways current registration. // Shows the registry $ rctl reg rctl get - List one or more resources. ``` // List all numbers $ rctl get numbers // List all numbers that belong to gateway reference gweef506 $ rctl get numbers --filter \"@.metadata.ref=='gweef506'\" // List number by reference $ rctl get numbers dd50baa4 // List all agents $ rctl get agents ``` rctl create - create a new resource. // Create a new gateway(s) using a .yaml or .yml file $ rctl create -f new-gateway.yaml rctl apply - update an existing resource(s) // Update an existing resource(s) .yaml or .yml. $ rctl apply -f new-gateway.yaml rctl delete - delete a resource. ``` // Delete all numbers for gateway reference gweef506 $ rctl delete numbers --filter \"@.metadata.gwRef=='gweef506'\" // Delete a single agent (using delete alias) $ rctl del agent ag3f77f6 ``` Cheat Sheet \u00b6 Create, delete, and update are only available in some implementations of the resources module. Request and store token \u00b6 ``` Request authentication for subsequent commands \u00b6 $ rctl login https://127.0.0.1:4567/api/{apiVersion } -u admin -p changeit ``` Clear out the session credentials \u00b6 ``` Clear session credentials \u00b6 $ rctl logout ``` Launch the Web Console \u00b6 ``` The Web Console re-uses the credentials of your Command-Line Tool \u00b6 rctl proxy ``` Showing the Registry \u00b6 ``` Shows all the Gateways that are currently available \u00b6 $ rctl registry # Shows only current registrations. You may use reg for short ``` Locating SIP Devices \u00b6 ``` Find all sip devices available at the location service \u00b6 $ rctl locate # This list does not include number-ingress-routes or domain-egress-routes ``` Creating Resources \u00b6 ``` Create new peers and agents \u00b6 $ rctl create -f asterisk.yaml # Create Peer in file asterisk.yaml $ rctl create -f agents-list.yaml # Create Agents in file agents-list.yaml ``` Finding Resources \u00b6 ``` Get Numbers \u00b6 $ rctl get numbers # List all available Numbers $ rctl get number # List all available Numbers $ rctl get number --filter \"@.metadata.ref=='dd50baa4'\" # Shows Number with reference 'Number0001' $ rctl get number --filter \"@.metadata.gwRef=='gweef506'\" # Shows Numbers with Gateway reference 'GW1232' Get agents \u00b6 $ rctl get agents # List all Agents ``` Deleting Resources \u00b6 ``` Delete command by refernce or filter \u00b6 $ rctl delete agent ag3f77f6 # Delete Agent by reference $ rctl del numbers --filter '@.metadata.gwRef=gweef506' # Delete Numbers using a filter ``` Updating Resources \u00b6 $ rctl apply -f asterisk.yaml # Create Peer in file asterisk.yaml $ rctl apply -f agents-list.yaml # Create Agents in file agents-list.yaml Dump all available logs \u00b6 $ rctl logs Restart the engine \u00b6 ``` To restart the engine immediately use the --now flag \u00b6 $ rctl restart --now ``` Stop the engine \u00b6 ``` To stop the engine immediately use the --now flag \u00b6 $ rctl restart --now ``` Check the engine status \u00b6 $ rctl ping Display version information \u00b6 $ rctl ver Manage general configuration \u00b6 ``` To update configuration use the apply subommand \u00b6 $ rctl config apply -f /path/to/config.yml To see the configuration use the describe subcommand \u00b6 $ rctl config describe --full ```","title":"Cheatsheet"},{"location":"administration/cli/cheatsheet/#installation","text":"To get the Routr Command-Line Tool run the following command: bash npm install -g routr-ctl The command-line tool is now globally accessible.","title":"Installation"},{"location":"administration/cli/cheatsheet/#login-to-a-routr-server","text":"To login to a Routr server, use the login command. bash rctl login https://127.0.0.1:4567/api/{apiVersion} -u admin -p changeit The current API version is v1beta1","title":"Login to a Routr server"},{"location":"administration/cli/cheatsheet/#syntax","text":"Use the following syntax to run rctl commands from your terminal window: rctl COMMAND [REF] [flags] where COMMAND , subcommand REF , and flags are: COMMAND : Specifies the operation that you want to perform on one or more resources. For example, create, get, delete, locate(loc). subcommand : Specifies the resource type. Resource types are case-sensitive, and you can specify the singular, plural, or abbreviated forms. For example, the following commands produce the same output: $ rctl get gateway gweef506 $ rctl get gateways gweef506 $ rctl get gw gweef506 REF : Specifies the reference to the resource. References are case-sensitive. For a full list, omit the reference. For example, $ rctl get agents . flags : Specifies optional flags. For example, you can use the --filter to further reduce the output of the get command . The --filter flag uses JsonPath to perform the filtering. The root is always '$'. All you need to add is the path to the property and the filter operators. For example: ```","title":"Syntax"},{"location":"administration/cli/cheatsheet/#this-returns-all-the-numbers-in-gateway-gweef506","text":"rctl get numbers --filter \"@.metadata.gwRef=='gweef506'\" ``` If you need help, just run rctl --help from the terminal window. ``` $ rctl --help usage: rctl [-h] [-v] COMMAND ... A tool for the management of a Routr instance named arguments: -h, --help show this help message and exit -v, --version print version information and quit Commands: COMMAND get display a list of resources create (crea) creates new resource(s) apply apply changes over existing resource(s) delete (del) delete an existing resource(s) locate (loc) locate sip device(s) registry (reg) shows gateways registrations proxy run a proxy to the server (beta) login sets connection info logout clear session credentials logs dumps all the available system logs restart restarts the engine stop stops the engine ping checks engine status version (ver) obtain rctl's version information config manage routr configuration Run 'rctl COMMAND --help' for more information on a command ``` Important: Some commands (i.e.: create, delete) are not available in the default implementation of the resources modules. Only persistent implementations support these commands.","title":"This returns all the Numbers in Gateway 'gweef506'"},{"location":"administration/cli/cheatsheet/#examples-common-operations","text":"Use the following set of examples to help you familiarize yourself with running the commonly used rctl operations: rctl locate or rctl loc - Locate a sip device registered on the Routr server // Locate all Sip Devices registered against a Routr server $ rctl loc rctl registry or rctl reg - Shows Gateways current registration. // Shows the registry $ rctl reg rctl get - List one or more resources. ``` // List all numbers $ rctl get numbers // List all numbers that belong to gateway reference gweef506 $ rctl get numbers --filter \"@.metadata.ref=='gweef506'\" // List number by reference $ rctl get numbers dd50baa4 // List all agents $ rctl get agents ``` rctl create - create a new resource. // Create a new gateway(s) using a .yaml or .yml file $ rctl create -f new-gateway.yaml rctl apply - update an existing resource(s) // Update an existing resource(s) .yaml or .yml. $ rctl apply -f new-gateway.yaml rctl delete - delete a resource. ``` // Delete all numbers for gateway reference gweef506 $ rctl delete numbers --filter \"@.metadata.gwRef=='gweef506'\" // Delete a single agent (using delete alias) $ rctl del agent ag3f77f6 ```","title":"Examples: Common operations"},{"location":"administration/cli/cheatsheet/#cheat-sheet","text":"Create, delete, and update are only available in some implementations of the resources module.","title":"Cheat Sheet"},{"location":"administration/cli/cheatsheet/#request-and-store-token","text":"```","title":"Request and store token"},{"location":"administration/cli/cheatsheet/#request-authentication-for-subsequent-commands","text":"$ rctl login https://127.0.0.1:4567/api/{apiVersion } -u admin -p changeit ```","title":"Request authentication for subsequent commands"},{"location":"administration/cli/cheatsheet/#clear-out-the-session-credentials","text":"```","title":"Clear out the session credentials"},{"location":"administration/cli/cheatsheet/#clear-session-credentials","text":"$ rctl logout ```","title":"Clear session credentials"},{"location":"administration/cli/cheatsheet/#launch-the-web-console","text":"```","title":"Launch the Web Console"},{"location":"administration/cli/cheatsheet/#the-web-console-re-uses-the-credentials-of-your-command-line-tool","text":"rctl proxy ```","title":"The Web Console re-uses the credentials of your Command-Line Tool"},{"location":"administration/cli/cheatsheet/#showing-the-registry","text":"```","title":"Showing the Registry"},{"location":"administration/cli/cheatsheet/#shows-all-the-gateways-that-are-currently-available","text":"$ rctl registry # Shows only current registrations. You may use reg for short ```","title":"Shows all the Gateways that are currently available"},{"location":"administration/cli/cheatsheet/#locating-sip-devices","text":"```","title":"Locating SIP Devices"},{"location":"administration/cli/cheatsheet/#find-all-sip-devices-available-at-the-location-service","text":"$ rctl locate # This list does not include number-ingress-routes or domain-egress-routes ```","title":"Find all sip devices available at the location service"},{"location":"administration/cli/cheatsheet/#creating-resources","text":"```","title":"Creating Resources"},{"location":"administration/cli/cheatsheet/#create-new-peers-and-agents","text":"$ rctl create -f asterisk.yaml # Create Peer in file asterisk.yaml $ rctl create -f agents-list.yaml # Create Agents in file agents-list.yaml ```","title":"Create new peers and agents"},{"location":"administration/cli/cheatsheet/#finding-resources","text":"```","title":"Finding Resources"},{"location":"administration/cli/cheatsheet/#get-numbers","text":"$ rctl get numbers # List all available Numbers $ rctl get number # List all available Numbers $ rctl get number --filter \"@.metadata.ref=='dd50baa4'\" # Shows Number with reference 'Number0001' $ rctl get number --filter \"@.metadata.gwRef=='gweef506'\" # Shows Numbers with Gateway reference 'GW1232'","title":"Get Numbers"},{"location":"administration/cli/cheatsheet/#get-agents","text":"$ rctl get agents # List all Agents ```","title":"Get agents"},{"location":"administration/cli/cheatsheet/#deleting-resources","text":"```","title":"Deleting Resources"},{"location":"administration/cli/cheatsheet/#delete-command-by-refernce-or-filter","text":"$ rctl delete agent ag3f77f6 # Delete Agent by reference $ rctl del numbers --filter '@.metadata.gwRef=gweef506' # Delete Numbers using a filter ```","title":"Delete command by refernce or filter"},{"location":"administration/cli/cheatsheet/#updating-resources","text":"$ rctl apply -f asterisk.yaml # Create Peer in file asterisk.yaml $ rctl apply -f agents-list.yaml # Create Agents in file agents-list.yaml","title":"Updating Resources"},{"location":"administration/cli/cheatsheet/#dump-all-available-logs","text":"$ rctl logs","title":"Dump all available logs"},{"location":"administration/cli/cheatsheet/#restart-the-engine","text":"```","title":"Restart the engine"},{"location":"administration/cli/cheatsheet/#to-restart-the-engine-immediately-use-the-now-flag","text":"$ rctl restart --now ```","title":"To restart the engine immediately use the --now flag"},{"location":"administration/cli/cheatsheet/#stop-the-engine","text":"```","title":"Stop the engine"},{"location":"administration/cli/cheatsheet/#to-stop-the-engine-immediately-use-the-now-flag","text":"$ rctl restart --now ```","title":"To stop the engine immediately use the --now flag"},{"location":"administration/cli/cheatsheet/#check-the-engine-status","text":"$ rctl ping","title":"Check the engine status"},{"location":"administration/cli/cheatsheet/#display-version-information","text":"$ rctl ver","title":"Display version information"},{"location":"administration/cli/cheatsheet/#manage-general-configuration","text":"```","title":"Manage general configuration"},{"location":"administration/cli/cheatsheet/#to-update-configuration-use-the-apply-subommand","text":"$ rctl config apply -f /path/to/config.yml","title":"To update configuration use the apply subommand"},{"location":"administration/cli/cheatsheet/#to-see-the-configuration-use-the-describe-subcommand","text":"$ rctl config describe --full ```","title":"To see the configuration use the describe subcommand"},{"location":"administration/cli/installation/","text":"To get the Routr Command-Line Tool run the following command: bash npm install -g routr-ctl The command-line tool is now globally accessible. Alternatively, you can install the tool in seconds on Linux (Ubuntu and others) with: bash sudo snap install rctl Login to a Routr server \u00b6 To log in to a Routr server and being issuing commands run the following commands. bash rctl login https://127.0.0.1:4567/api/{apiVersion} -u admin -p changeit The current API version is v1beta1","title":"Installation"},{"location":"administration/cli/installation/#login-to-a-routr-server","text":"To log in to a Routr server and being issuing commands run the following commands. bash rctl login https://127.0.0.1:4567/api/{apiVersion} -u admin -p changeit The current API version is v1beta1","title":"Login to a Routr server"},{"location":"administration/cli/remote-access/","text":"By default, Routr installs a certificate that only allows for connections using the localhost or 127.0.0.1 . To use rctl tool from a remote host, you must generate a certificate that accepts connections to the desired domain name or IP and then update the spec.restService section of the config.yml . Here is an example using a self-signed certificate(usually enough). bash keytool -genkey -keyalg RSA \\ -noprompt \\ -alias routr \\ -keystore api-cert.jks \\ -storepass changeit \\ -keypass changeit \\ -validity 365 \\ -keysize 2048 \\ -dname \"CN=domain.com, OU=OSS, O=Your Company Inc, L=Sanford, ST=NC, C=US\" \\ -ext SAN=dns:your.domain.com,dns:localhost,ip:127.0.0.1 Remember to place the certificate in the etc/certs folder","title":"Remote Access to a Routr Server"},{"location":"api/overview/","text":"Routr API version is currently v1beta1 . We continue to improve the API, resource definition, and other artifacts until we reach a final version. We can then establish a policy to ensure backward compatibility. Until then keep an eye on this document. The endpoint for the API is: /api/{apiversion} Authentication \u00b6 A JWT token is used to authenticate the server. To obtain the token, use the /api/{apiversion}/token endpoint with basic authentication. Use the information from the User resource. You must append the token to all requests as a query parameter. Sample call To obtain the token ```bash curl -k -u \"admin:changeit\" https://localhost:4567/api/v1beta1/token Resulted in \u00b6 { \"status\":200, \"message\":\"Successful request\", \"data\":\"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiJ9.TZZ4kp5xIdYzs5RRt6_qVxJcOiLdk1IEHFMBSZ7SRENx6kyVhwfAlm-oeM4L2XFIr4evlTCxKEIKc0fZKwPcjw\" } ``` To use the token ```bash curl -k -u \"admin:changeit\" https://localhost:4567/api/v1beta1/location?token=eyJhbGciOiJIUzUxMiJ9.e ... Resulted in \u00b6 { \"status\":200, \"message\":\"Successful request\", \"data\":[ { \"addressOfRecord\":\"sip: 1001@sip.local \", \"contactInfo\":\"sip:45962087@192.168.1.127:61147;transport=tcp;nat=false;expires=600\" } ] } ``` Error Responses \u00b6 The following are general errors we might have to account for: Code Content 400 BAD_REQUEST { status: \"400\", message : \"Bad Request\" } 401 UNAUTHORIZED { status: \"401\", message : \"You are unauthorized to make this request.\" } 405 NOT_SUPPORTED { status: \"405\", message : \"Operation not supported by data source provider\" } 409 CONFLICT { status: \"409\", message : \"An attempt was made to create an object that already exists\" } 4091 UNFULFILLED_DEPENDENCY_RESPONSE { status: \"4091\", message : \"Found one or more unfulfilled dependencies\" }","title":"Overview"},{"location":"api/overview/#authentication","text":"A JWT token is used to authenticate the server. To obtain the token, use the /api/{apiversion}/token endpoint with basic authentication. Use the information from the User resource. You must append the token to all requests as a query parameter. Sample call To obtain the token ```bash curl -k -u \"admin:changeit\" https://localhost:4567/api/v1beta1/token","title":"Authentication"},{"location":"api/overview/#resulted-in","text":"{ \"status\":200, \"message\":\"Successful request\", \"data\":\"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiJ9.TZZ4kp5xIdYzs5RRt6_qVxJcOiLdk1IEHFMBSZ7SRENx6kyVhwfAlm-oeM4L2XFIr4evlTCxKEIKc0fZKwPcjw\" } ``` To use the token ```bash curl -k -u \"admin:changeit\" https://localhost:4567/api/v1beta1/location?token=eyJhbGciOiJIUzUxMiJ9.e ...","title":"Resulted in"},{"location":"api/overview/#resulted-in_1","text":"{ \"status\":200, \"message\":\"Successful request\", \"data\":[ { \"addressOfRecord\":\"sip: 1001@sip.local \", \"contactInfo\":\"sip:45962087@192.168.1.127:61147;transport=tcp;nat=false;expires=600\" } ] } ```","title":"Resulted in"},{"location":"api/overview/#error-responses","text":"The following are general errors we might have to account for: Code Content 400 BAD_REQUEST { status: \"400\", message : \"Bad Request\" } 401 UNAUTHORIZED { status: \"401\", message : \"You are unauthorized to make this request.\" } 405 NOT_SUPPORTED { status: \"405\", message : \"Operation not supported by data source provider\" } 409 CONFLICT { status: \"409\", message : \"An attempt was made to create an object that already exists\" } 4091 UNFULFILLED_DEPENDENCY_RESPONSE { status: \"4091\", message : \"Found one or more unfulfilled dependencies\" }","title":"Error Responses"},{"location":"api/registry/","text":"This method gets a list of available(online) gateways. URL /registry Method GET Parameters Parameter Name Type Value Description page query number Pagination index itemsPerPage query number Number of elements per request Request body Do not supply a request body with this method. Response This method returns a list with registered devices. Sample Call ```json GET /api/{apiversion}/registry { } HTTP/1.1 200 OK { \"status\": 200, \"message\": \"Successful request\", \"meta\": { \"currentPage\": 1, \"totalPages\": 1, \"itemsPerPage\": 30, \"totalItems\": 1 }, \"data\": [ { \"username\": \"215706\", \"host\": \"atlanta2.voip.ms\", \"ip\":\"209.217.224.50\", \"expires\": 600, \"registeredOn\": 1588525156280, \"gwRef\": \"gw50a1a4ca\", \"gwURI\": \"sip: 215706@atlanta2.voip.ms :5060\", \"regOnFormatted\": \"a few seconds ago\" } ] } ```","title":"Registry"},{"location":"api/token/","text":"This method gets a token for subsequent API calls. URL /token Method GET Parameters This method does not receive any parameters. Request body Do not supply a request body with this method. Response If successful, this method returns a string with a token. Sample Call ```json GET /api/{apiversion}/token { } HTTP/1.1 200 OK { \"status\": 200, \"message\": \"Successful request\", \"data\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiJ9.TZZ4kp5xIdYzs5RRt6_qVxJcOiLdk1IEHFMBSZ7SRENx6kyVhwfAlm-oeM4L2XFIr4evlTCxKEIKc0fZKwPcjw\" } ``` Notes You must send a basic authentication header with this request.","title":"Credentials"},{"location":"api/agents/create/","text":"Creates a new Agent resource. The Domain must exist before creating the Agent. Otherwise, this method responds with a UNFULFILLED_DEPENDENCY_RESPONSE . URL /agents Method POST Parameters This method does not receive any parameters. Request body A file containing an Agent resource in json format. Response If successful this method creates an Agent resource. Sample Call ```json POST /api/{apiversion}/agents { \"apiVersion\": \"v1beta1\", \"kind\": \"Agent\", \"metadata\": { \"name\": \"John Doe\" }, \"spec\": { \"credentials\": { \"username\": \"1001\", \"secret\": \"1234\" }, \"domains\": [ \"sip.local\" ] } } HTTP/1.1 201 Created { \"status\": \"201\", \"message\": \"Created\", \"data\": \"ag3f77f6\" } ```","title":"create"},{"location":"api/agents/delete/","text":"Removes an Agent resource from a persistent database. URL /agents/{ref} Method DELETE Parameters Parameter Name Type Value Description ref path string Resource reference Request body Do not supply a request body with this method. Response If successful this method removes an Agent resource. Sample Call ```json DELETE /api/v1beta1/agents/ag3f77f6 { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\" } ```","title":"delete"},{"location":"api/agents/get/","text":"This method returns an Agent resource. URL /agents/{ref} Method GET Parameters Parameter Name Type Value Description ref path string Resource reference Request body Do not supply a request body with this method. Response If successful this method returns an Agent resource. Sample Call ```json GET /api/{apiversion}/agents/ag3f77f6 { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\", \"data\" : { \"apiVersion\": \"v1beta1\", \"kind\": \"Agent\", \"metadata\": { \"name\": \"John Doe\", \"ref\": \"ag3f77f6\" }, \"spec\": { \"credentials\": { \"username\": \"1001\", \"secret\": \"1234\" }, \"domains\": [ \"sip.local\" ] } } } ```","title":"get"},{"location":"api/agents/list/","text":"This method returns a list of Agent resources. URL /agents Method GET Parameters Parameter Name Type Value Description filter query string Use filter to narrow the elements shown page query number Pagination index itemsPerPage query number Number of elements per request Note: The filter parameter uses JsonPath format Request body Do not supply a request body with this method. Response If successful this method returns a list of Agent resources. Sample Call ```json GET /api/{apiversion}/agents { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\", \"meta\": { \"currentPage\": 1, \"totalPages\": 1, \"itemsPerPage\": 30, \"totalItems\": 1 }, \"data\": [{ \"apiVersion\": \"v1beta1\", \"kind\": \"Agent\", \"metadata\": { \"name\": \"John Doe\", \"ref\": \"ag3f77f6\" }, \"spec\": { \"credentials\": { \"username\": \"1001\", \"secret\": \"1234\" }, \"domains\": [ \"sip.local\" ] } }] } ```","title":"list"},{"location":"api/agents/update/","text":"Updates an existing Agent resource. URL /agents/{ref} Method PUT Parameters This method does not receive any parameters. Request body A file containing an Agent resource in json format. Response If successful this method updates an Agent resource. Sample Call ```json PUT /api/v1beta1/agents/ag3f77f6 { \"apiVersion\": \"v1beta1\", \"kind\": \"Agent\", \"metadata\": { \"name\": \"John Doe\", \"ref\": \"ag3f77f6\" }, \"spec\": { \"credentials\": { \"username\": \"1001\", \"secret\": \"1234\" }, \"domains\": [ \"sip.local\" ] } } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\" } ```","title":"update"},{"location":"api/config/get/","text":"This method returns the servers' configuration. URL /system/config Method GET Parameters Parameter Name Type Value Description full query boolean If set to true it will return a merged configuration between defaults and user defined values Request body Do not supply a request body with this method. Response If successful this method returns the current configuration from the server. Sample Call ```json GET /api/{apiversion}/system/config { } HTTP/1.1 200 OK { \"status\": 200, \"message\": \"Successful request\", \"data\": { ... } } ```","title":"Get"},{"location":"api/config/update/","text":"This method updates the servers' configuration. URL /system/config Method PUT Parameters This method does not receive any parameters. Request body A file containing the servers' configuration in json format. Response The changes will take effect on the next time the instance restart. Sample Call ```json PUT /api/{apiversion}/config { \"apiVersion\": \"v1beta1\", \"spec\": { \"dataSource\": { \"provider\": \"redis_data_provider\" } } } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\" } ```","title":"Update"},{"location":"api/domains/create/","text":"Creates a new Domain resource. URL /domains Method POST Parameters This method does not receive any parameters. Request body A file containing a Domain resource in json format. Response If successful this method creates a Domain resource. Sample Call ```json POST /api/{apiversion}/domains { \"apiVersion\": \"v1beta1\", \"kind\": \"Domain\", \"metadata\": { \"name\": \"Another Office\" }, \"spec\": { \"context\": { \"domainUri\": \"sip2.local\" } } } HTTP/1.1 201 Created { \"status\": \"201\", \"message\": \"Created\", \"data\": \"dm6c87r2\" } ```","title":"create"},{"location":"api/domains/delete/","text":"Removes a Domain resource from a persistent database. Before removing a Domain, ensure you have remove all of it child Agents. Otherwise, this method returns a FOUND_DEPENDENT_OBJECTS_RESPONSE URL /domains/{ref} Method DELETE Parameters Parameter Name Type Value Description ref path string Resource reference Request body Do not supply a request body with this method. Response If successful this method removes a Domain resource. Sample Call ```json DELETE /api/v1beta1/domains/dm6c87r2 { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\" } ```","title":"delete"},{"location":"api/domains/get/","text":"This method returns a Gateway resource. URL /domains/{ref} Method GET Parameters Parameter Name Type Value Description ref path string Resource reference Request body Do not supply a request body with this method. Response If successful this method returns a Domain resource. Sample Call ```json GET /api/{apiversion}/domains/dm6c87r2 { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\", \"data\" : { \"apiVersion\": \"v1beta1\", \"kind\": \"Domain\", \"metadata\": { \"name\": \"Another Office\", \"ref\": \"dm6c87r2\" }, \"spec\": { \"context\": { \"domainUri\": \"sip2.local\" } } } } ```","title":"get"},{"location":"api/domains/list/","text":"This method returns a list of Domain resources. URL /domains Method GET Parameters Parameter Name Type Value Description filter query string Use filter to narrow the elements shown page query number Pagination index itemsPerPage query number Number of elements per request Note: The filter parameter uses JsonPath format Request body Do not supply a request body with this method. Response If successful this method returns a list of Domain resources. Sample Call ```json GET /api/{apiversion}/domains { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\", \"meta\": { \"currentPage\": 1, \"totalPages\": 1, \"itemsPerPage\": 30, \"totalItems\": 1 }, \"data\" : [{ \"apiVersion\": \"v1beta1\", \"kind\": \"Domain\", \"metadata\": { \"name\": \"Another Office\", \"ref\": \"dm6c87r2\" }, \"spec\": { \"context\": { \"domainUri\": \"sip2.local\" } } }] } ```","title":"list"},{"location":"api/domains/update/","text":"Updates an existing Domain resource. URL /domains/{ref} Method PUT Parameters This method does not receive any parameters. Request body A file containing a Domain resource in json format. Response If successful this method updates a Domain resource. Sample Call ```json PUT /api/v1beta1/domains/dm6c87r2 { \"apiVersion\": \"v1beta1\", \"kind\": \"Domain\", \"metadata\": { \"name\": \"Another Office\", \"ref\": \"dm6c87r2\" }, \"spec\": { \"context\": { \"domainUri\": \"sip2.local\" } } } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\" } ```","title":"update"},{"location":"api/gateways/create/","text":"Creates a new Gateway resource. URL /gateways Method POST Parameters This method does not receive any parameters. Request body A file containing a Gateway resource in json format. Response If successful this method creates a Gateway resource. Sample Call ```json POST /api/{apiversion}/gateways { \"apiVersion\": \"v1beta1\", \"kind\": \"Gateway\", \"metadata\": { \"name\": \"Provider Inc.\" }, \"spec\": { \"host\": \"sip.provider.net\", \"credentials\": { \"username\": \"youruser\", \"secret\": \"yoursecret\" }, \"transport\": \"udp\" } } HTTP/1.1 201 Created { \"status\": \"201\", \"message\": \"Created\", \"data\": \"gw5c77t2\" } ```","title":"create"},{"location":"api/gateways/delete/","text":"Removes a Gateway resource from a persistent database. Before removing a Gateway, ensure you have remove all of it child Numbers. Otherwise, this method returns a FOUND_DEPENDENT_OBJECTS_RESPONSE URL /gateways/{ref} Method DELETE Parameters Parameter Name Type Value Description ref path string Resource reference Request body Do not supply a request body with this method. Response If successful this method removes a Gateway resource. Sample Call ```json DELETE /api/v1beta1/gateways/gw5c77t2 { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\" } ```","title":"delete"},{"location":"api/gateways/get/","text":"This method returns a Gateway resource. URL /gateways/{ref} Method GET Parameters Parameter Name Type Value Description ref path string Resource reference Request body Do not supply a request body with this method. Response If successful this method returns a Gateway resource. Sample Call ```json GET /api/{apiversion}/gateways/gw5c77t2 { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\", \"data\" : { \"apiVersion\": \"v1beta1\", \"kind\": \"Gateway\", \"metadata\": { \"name\": \"Provider Inc.\", \"ref\": \"gw5c77t2\" }, \"spec\": { \"host\": \"sip.provider.net\", \"credentials\": { \"username\": \"youruser\", \"secret\": \"yoursecret\" }, \"transport\": \"udp\" } } } ```","title":"get"},{"location":"api/gateways/list/","text":"This method returns a list of Gateways resources. URL /gateways Method GET Parameters Parameter Name Type Value Description filter query string Use filter to narrow the elements shown page query number Pagination index itemsPerPage query number Number of elements per request Note: The filter parameter uses JsonPath format Request body Do not supply a request body with this method. Response If successful this method returns a list of Gateways resources. Sample Call ```json GET /api/{apiversion}/gateways { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\", \"meta\": { \"currentPage\": 1, \"totalPages\": 1, \"itemsPerPage\": 30, \"totalItems\": 1 }, \"data\" : [{ \"apiVersion\": \"v1beta1\", \"kind\": \"Gateway\", \"metadata\": { \"name\": \"Provider Inc.\", \"ref\": \"gw5c77t2\" }, \"spec\": { \"host\": \"sip.provider.net\", \"credentials\": { \"username\": \"youruser\", \"secret\": \"yoursecret\" }, \"transport\": \"udp\" } }] } ```","title":"list"},{"location":"api/gateways/update/","text":"Updates an existing Gateway resource. URL /gateways/{ref} Method PUT Parameters This method does not receive any parameters. Request body A file containing a Gateway resource in json format. Response If successful this method updates a Gateway resource. Sample Call ```json PUT /api/v1beta1/gateways/gw5c77t2 { \"apiVersion\": \"v1beta1\", \"kind\": \"Gateway\", \"metadata\": { \"name\": \"Provider Inc.\", \"ref\": \"gw5c77t2\" }, \"spec\": { \"host\": \"sip.provider.net\", \"credentials\": { \"username\": \"youruser\", \"secret\": \"yoursecret\" }, \"transport\": \"udp\" } } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\" } ```","title":"update"},{"location":"api/location/create/","text":"Adds an entry into the location table URL /location/{addressOfRecord} Method POST Parameters Parameter Name Type Value Description addressOfRecord path string Address of record for the new entry Request body Supply a json containing an address, port, expires, user values. Response This method adds an entry to the location table. Useful for end-to-end testing. Sample Call ```json POST /api/{apiversion}/location/sip:guest@guest { \"user\": \"guest\", \"address\": \"192.168.1.149\", \"port\": 5080, \"expires\": 600 } HTTP/1.1 200 OK { \"status\": 200, \"message\": \"Added location entry\" } ```","title":"Create"},{"location":"api/location/delete/","text":"Evicts an entry from the location table URL /location/{addressOfRecord} Method DELETE Parameters Parameter Name Type Value Description addressOfRecord path string Address of record for the entry Request body Do not supply a request body with this method. Response This method removes and entry for the give address of record Sample Call ```json DELETE /api/{apiversion}/location/sip:guest@guest { } HTTP/1.1 200 OK { \"status\": 200, \"message\": \"Location entry evicted\" } ```","title":"Delete"},{"location":"api/location/list/","text":"Gets a list of registered devices. URL /location Method GET Parameters Parameter Name Type Value Description page query number Pagination index itemsPerPage query number Number of elements per request Request body Do not supply a request body with this method. Response This method returns a list with registered devices in the response body. Sample Call ```json GET /api/{apiversion}/location { } HTTP/1.1 200 OK { \"status\": 200, \"message\": \"Successful request\", \"meta\": { \"currentPage\": 1, \"totalPages\": 1, \"itemsPerPage\": 30, \"totalItems\": 1 }, \"data\":[{ \"addressOfRecord\": \"sip: 1001@sip.local \", \"contactInfo\": \"sip:45962087@192.168.1.127:59985;transport=tcp;nat=false;expires=600\" }] } ```","title":"list"},{"location":"api/numbers/create/","text":"Creates a new Number. The Gateway must exist before creating the Number. Otherwise, this method responds with a UNFULFILLED_DEPENDENCY_RESPONSE . URL /numbers Method POST Parameters This method does not receive any parameters. Request body A file containing a Number resource in json format. Response If successful this method creates a Number. Sample Call ```json POST /api/{apiversion}/numbers { \"apiVersion\": \"v1beta1\", \"kind\": \"Number\", \"metadata\": { \"gwRef\": \"gweef506\", \"geoInfo\": { \"city\": \"City, State\", \"country\": \"Country\", \"countryISOCode\": \"US\" } }, \"spec\": { \"location\": { \"telUrl\": \"tel:0000000000\", \"aorLink\": \"sip: 1001@sip.local \" } } } HTTP/1.1 201 Created { \"status\": \"201\", \"message\": \"Created\", \"data\": \"dd50baa4\" } ```","title":"create"},{"location":"api/numbers/delete/","text":"Removes a Number from a persistent database. URL /numbers/{ref} Method DELETE Parameters Parameter Name Type Value Description ref path string Resource reference Request body Do not supply a request body with this method. Response If successful this method removes a Number. Sample Call ```json DELETE /api/v1beta1/numbers/dd50baa4 { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\" } ```","title":"delete"},{"location":"api/numbers/get/","text":"This method returns an Agent resource. URL /numbers/{ref} Method GET Parameters Parameter Name Type Value Description ref path string Resource reference Request body Do not supply a request body with this method. Response If successful this method returns a Number. Sample Call ```json GET /api/{apiversion}/numbers/dd50baa4 { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\", \"data\" : { \"apiVersion\": \"v1beta1\", \"kind\": \"Number\", \"metadata\": { \"ref\": \"dd50baa4\", \"gwRef\": \"gweef506\", \"geoInfo\": { \"city\": \"City, State\", \"country\": \"Country\", \"countryISOCode\": \"US\" } }, \"spec\": { \"location\": { \"telUrl\": \"tel:0000000000\", \"aorLink\": \"sip: 1001@sip.local \" } } } } ```","title":"get"},{"location":"api/numbers/list/","text":"This method returns a list of Numbers. URL /numbers Method GET Parameters Parameter Name Type Value Description filter query string Use filter to narrow the elements shown page query number Pagination index itemsPerPage query number Number of elements per request Note: The filter parameter uses JsonPath format Request body Do not supply a request body with this method. Response If successful this method returns a list of Numbers. Sample Call ```json GET /api/{apiversion}/numbers { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\", \"meta\": { \"currentPage\": 1, \"totalPages\": 1, \"itemsPerPage\": 30, \"totalItems\": 1 }, \"data\" : [{ \"apiVersion\": \"v1beta1\", \"kind\": \"Number\", \"metadata\": { \"ref\": \"dd50baa4\", \"gwRef\": \"gweef506\", \"geoInfo\": { \"city\": \"City, State\", \"country\": \"Country\", \"countryISOCode\": \"US\" } }, \"spec\": { \"location\": { \"telUrl\": \"tel:0000000000\", \"aorLink\": \"sip: 1001@sip.local \" } } }] } ```","title":"list"},{"location":"api/numbers/update/","text":"Updates an existing Number. URL /numbers/{ref} Method PUT Parameters This method does not receive any parameters. Request body A file containing a Number resource in json format. Response If successful this method updates a Number. Sample Call ```json PUT /api/v1beta1/numbers/dd50baa4 { \"apiVersion\": \"v1beta1\", \"kind\": \"Number\", \"metadata\": { \"ref\": \"dd50baa4\", \"gwRef\": \"gweef506\", \"geoInfo\": { \"city\": \"City, State\", \"country\": \"Country\", \"countryISOCode\": \"US\" } }, \"spec\": { \"location\": { \"telUrl\": \"tel:0000000000\", \"aorLink\": \"sip: 1001@sip.local \" } } } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\" } ```","title":"update"},{"location":"api/peers/create/","text":"Creates a new Peer resource. URL /peers Method POST Parameters This method does not receive any parameters. Request body A file containing a Peer resource in json format. Response If successful this method creates a Peer resource. Sample Call ```json POST /api/{apiversion}/peers { \"apiVersion\": \"v1beta1\", \"kind\": \"Peer\", \"metadata\": { \"name\": \"Asterisk PBX\" }, \"spec\": { \"credentials\": { \"username\": \"ast\", \"secret\": \"1234\" } } } HTTP/1.1 201 Created { \"status\": \"201\", \"message\": \"Created\", \"data\": \"pr2c77f4\" } ```","title":"create"},{"location":"api/peers/delete/","text":"Removes a Peer resource from a persistent database. URL /peers/{ref} Method DELETE Parameters Parameter Name Type Value Description ref path string Resource reference Request body Do not supply a request body with this method. Response If successful this method removes a Peer resource. Sample Call ```json DELETE /api/v1beta1/peers/pr2c77f4 { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\" } ```","title":"delete"},{"location":"api/peers/get/","text":"This method returns a Peer resource. URL /peers/{ref} Method GET Parameters Parameter Name Type Value Description ref path string Resource reference Request body Do not supply a request body with this method. Response If successful this method returns a Peer resource. Sample Call ```json GET /api/{apiversion}/peers/pr2c77f4 { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\", \"data\" : { \"apiVersion\": \"v1beta1\", \"kind\": \"Peer\", \"metadata\": { \"name\": \"Asterisk PBX\", \"ref\": \"pr2c77f4\" }, \"spec\": { \"credentials\": { \"username\": \"ast\", \"secret\": \"1234\" } } } } ```","title":"get"},{"location":"api/peers/list/","text":"This method returns a list of Peer resources. URL /peers Method GET Parameters Parameter Name Type Value Description filter query string Use filter to narrow the elements shown page query number Pagination index itemsPerPage query number Number of elements per request Note: The filter parameter uses JsonPath format Request body Do not supply a request body with this method. Response If successful this method returns a list of Peer resources. Sample Call ```json GET /api/{apiversion}/peers { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\", \"meta\": { \"currentPage\": 1, \"totalPages\": 1, \"itemsPerPage\": 30, \"totalItems\": 1 }, \"data\" : [{ \"apiVersion\": \"v1beta1\", \"kind\": \"Peer\", \"metadata\": { \"name\": \"Asterisk PBX\", \"ref\": \"pr2c77f4\" }, \"spec\": { \"credentials\": { \"username\": \"ast\", \"secret\": \"1234\" } } }] } ```","title":"list"},{"location":"api/peers/update/","text":"Updates an existing Peer resource. URL /peers/{ref} Method PUT Parameters This method does not receive any parameters. Request body A file containing a Peer resource in json format. Response If successful this method updates a Peer resource. Sample Call ```json PUT /api/v1beta1/peers/pr2c77f4 { \"apiVersion\": \"v1beta1\", \"kind\": \"Peer\", \"metadata\": { \"name\": \"Asterisk PBX\", \"ref\": \"pr2c77f4\" }, \"spec\": { \"credentials\": { \"username\": \"ast\", \"secret\": \"1234\" } } } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\" } ```","title":"update"},{"location":"api/status/get/","text":"Pings an instance of Routr engine. URL /system/status Method GET Parameters This method does not receive any parameters. Request body Do not supply a request body with this method. Response If successful, this method will return a status = 200 . A client implementing this method can assumed that no answer or a bad answer means that the server us down or \"unhealthy.\" Sample Call ```json GET /api/{apiversion}/system/status { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Successful request\", \"data\": \"up\" } ```","title":"Get"},{"location":"api/status/update/","text":"This method returns information about the server. URL /system/status/{status} Method POST Parameters Parameter Name Type Value Description status path string This accepts either down or restarting parameters now query boolean If set to true it will not wait for current calls to finish Request body Do not supply a request body with this method. Response If successful this method causes the server to change its status. Sample Call ```json POST /api/{apiversion}/system/status/reload { } HTTP/1.1 200 OK { \"status\": \"200\", \"message\": \"Request sent to server\" } ```","title":"Update"},{"location":"api/sys/info/","text":"This method returns information about the server. URL /system/info Method GET Parameters This method does not receive any parameters. Request body Do not supply a request body with this method. Response If successful this method returns relevant information about the server. Sample Call ```json GET /api/{apiversion}/system/info { } HTTP/1.1 200 OK { \"status\":200, \"message\":\"Successful request\", \"data\":{ \"version\":\"v1.0\", \"apiVersion\":\"v1beta1\", \"apiPath\":\"/api/v1beta1\", \"env\":[ { \"var\":\"EXTERN_ADDR\", \"value\":\"172.220.246.46\" }, { \"var\":\"LOCALNETS\", \"value\": \"192.168.1.149/31\" }, { \"var\":\"REGISTRAR_INTF\", \"value\": \"External\" } ] } } ```","title":"Info"},{"location":"api/sys/logs/","text":"This method returns logs from the server URL /system/logs Method GET Parameters This method does not receive any parameters. Request body Do not supply a request body with this method. Response If successful this method returns logging information from the server. Sample Call ```json GET /api/{apiversion}/system/logs { } HTTP/1.1 200 OK { \"status\":200, \"message\":\"Successful request\", \"data\":\"[DEBUG] 2020-04-13 12:29:49.785...\" }","title":"Logs"},{"location":"configuration/agents/","text":"Agents represent SIP endpoints such as softphones, IP phones, or paging speakers. A Domain binds agents together. An Agent can belong to one or multiple Domains. The Agents configuration can be provided using the file config/agents.yml located at the root of your Routr installation. If using Redis this configuration gets stored in the database. Agent Resource \u00b6 Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.name Friendly name for the SIP device Yes spec.privacy If set to Private the server removes identifiable information for the requests. Defaults to None No spec.credentials.username Agent's credential username Yes spec.credentials.secret Agent's credential secret Yes spec.domains[*] Context/s in which this Agent is allowed to communicate. FQDN is recommended Yes Example \u00b6 yaml - apiVersion: v1beta1 kind: Agent metadata: name: John Doe spec: credentials: username: john secret: '1234' domains: [sip.local]","title":"Agents Configuration"},{"location":"configuration/agents/#agent-resource","text":"Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.name Friendly name for the SIP device Yes spec.privacy If set to Private the server removes identifiable information for the requests. Defaults to None No spec.credentials.username Agent's credential username Yes spec.credentials.secret Agent's credential secret Yes spec.domains[*] Context/s in which this Agent is allowed to communicate. FQDN is recommended Yes","title":"Agent Resource"},{"location":"configuration/agents/#example","text":"yaml - apiVersion: v1beta1 kind: Agent metadata: name: John Doe spec: credentials: username: john secret: '1234' domains: [sip.local]","title":"Example"},{"location":"configuration/domains/","text":"Domains group Agents together. They help isolate groups and allow the creation of rule for incoming and outgoing calling. The domains configuration can be provided using the file config/domains.yml located at the root of your Routr installation. If using Redis this configuration gets stored in the database. Domain Resource \u00b6 Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.name Friendly name for the SIP domain Yes spec.context.domainUri Domain URI. FQDN is recommended Yes spec.context.egressPolicy.rule Regular expression indicating when a call will be routed via spec.context.egressPolicy.numberRef No spec.context.egressPolicy.numberRef Reference to the Number that will route the call No spec.context.accessControlList.allow[*] Traffic allow for Network in list No spec.context.accessControlList.deny[*] Traffic disabled for Network in list No ACL Rules may be in CIDR, IP/Mask, or single IP format. Example of rules are: 0.0.0.0/1 # all 192.168.1.0/255.255.255.0 192.168.0.1/31 Example \u00b6 yaml - apiVersion: v1beta1 kind: Domain metadata: name: Local Server spec: context: domainUri: sip.local egressPolicy: rule: .* numberRef: Number0001 accessControlList: deny: [0.0.0.0/1] # Deny all allow: [192.168.0.1/31]","title":"Domains Configuration"},{"location":"configuration/domains/#domain-resource","text":"Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.name Friendly name for the SIP domain Yes spec.context.domainUri Domain URI. FQDN is recommended Yes spec.context.egressPolicy.rule Regular expression indicating when a call will be routed via spec.context.egressPolicy.numberRef No spec.context.egressPolicy.numberRef Reference to the Number that will route the call No spec.context.accessControlList.allow[*] Traffic allow for Network in list No spec.context.accessControlList.deny[*] Traffic disabled for Network in list No ACL Rules may be in CIDR, IP/Mask, or single IP format. Example of rules are: 0.0.0.0/1 # all 192.168.1.0/255.255.255.0 192.168.0.1/31","title":"Domain Resource"},{"location":"configuration/domains/#example","text":"yaml - apiVersion: v1beta1 kind: Domain metadata: name: Local Server spec: context: domainUri: sip.local egressPolicy: rule: .* numberRef: Number0001 accessControlList: deny: [0.0.0.0/1] # Deny all allow: [192.168.0.1/31]","title":"Example"},{"location":"configuration/gateways/","text":"Use the Gateway resource to register with a SIP Gateways or SBCs and send or receive calls from the PSTN. The Gateways configuration can be provided using the file config/gateways.yml . The file is located at the root of your Routr installation, or as defined in the environment variable CONFIG_FILE. If using Redis this configuration gets stored in the database. For static IP authentication be sure to properly configure the spec.externAddr and spec.localnets in config.yml . Gateway Resource \u00b6 Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.name Friendly name for the SIP device Yes metadata.ref Reference to this resource No spec.credentials.username Gateway username. No required for static IP authentication No spec.credentials.secret Gateway secret. No required for static IP authentication No spec.host Gateway host Yes spec.transport Transport protocol Yes spec.expires Requested lifespan of the registration in seconds. Defaults to 600 No spec.registries.[*] Additional registries for ingress calls No Example of Gateway in Registration Mode \u00b6 yaml - apiVersion: v1beta1 kind: Gateway metadata: name: Provider, Inc ref: GW0001 spec: host: sip.provider.com transport: tcp credentials: username: 'user' secret: changeit Example if Gateway using Static Mode \u00b6 yaml - apiVersion: v1beta1 kind: Gateway metadata: name: Provider 2, Inc ref: GW0002 spec: host: sip2.provider.com port: 5080 transport: tcp","title":"Carriers(Gateways) Configuration"},{"location":"configuration/gateways/#gateway-resource","text":"Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.name Friendly name for the SIP device Yes metadata.ref Reference to this resource No spec.credentials.username Gateway username. No required for static IP authentication No spec.credentials.secret Gateway secret. No required for static IP authentication No spec.host Gateway host Yes spec.transport Transport protocol Yes spec.expires Requested lifespan of the registration in seconds. Defaults to 600 No spec.registries.[*] Additional registries for ingress calls No","title":"Gateway Resource"},{"location":"configuration/gateways/#example-of-gateway-in-registration-mode","text":"yaml - apiVersion: v1beta1 kind: Gateway metadata: name: Provider, Inc ref: GW0001 spec: host: sip.provider.com transport: tcp credentials: username: 'user' secret: changeit","title":"Example of Gateway in Registration Mode"},{"location":"configuration/gateways/#example-if-gateway-using-static-mode","text":"yaml - apiVersion: v1beta1 kind: Gateway metadata: name: Provider 2, Inc ref: GW0002 spec: host: sip2.provider.com port: 5080 transport: tcp","title":"Example if Gateway using Static Mode"},{"location":"configuration/general/","text":"The general configuration affects your entire Routr instance. The general configuration can be provided using the file config/config.yml located at the root of your Routr installation. General Configuration Parameters \u00b6 Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes metadata.userAgent Sets sip header User-Agent to the desired value No spec.dataSource.provider Defines data provider. Defaults to files_data_provider No spec.dataSource.parameters Data Source Parameters. Ex.: 'host=localhost,port=6379' No spec.bindAddr Default stack IP address No spec.externAddr IP address to advertise No spec.localnets Local networks. Use in combination with spec.externAddr No spec.recordRoute Stay within the signaling path No spec.transport.[*].bindAddr Overwrites spec.bindAddr for transport entry No spec.transport.[*].port Transport port Yes spec.transport.[*].protocol Valid values are: tcp , udp , tls , sctp , ws , wss Yes spec.registrarIntf Internal causes the server to use the IP and port it \"sees\"(received & rport) from a device attempting to register. Defaults to External No spec.accessControlList.deny.[*] Deny incoming traffic from network list No spec.accessControlList.allow.[*] Allow incoming traffic from network list No spec.restService.bindAddr Restful service listening address No spec.restService.port Restful service port. Defaults to 4567 No spec.restService.minThreads Minimum thread allocation. Defaults to 8 No spec.restService.maxThreads Maximum thread allocation. Defaults to 200 No spec.restService.timeOutMillis Will reject requests that last more than this value. Defaults to 5000(5 seconds) No spec.restService.unsecured Disabled https for restful calls. Defaults to false No spec.restService.keyStore Path to keyStore No spec.restService.trueStore Path to trueStore No spec.restService.keyStorePassword Password for keyStore No spec.restService.trueStorePassword Password for trueStore No spec.securityContext.keyStore Path to keyStore Yes spec.securityContext.trustStore Path to trueStore Yes spec.securityContext.keyStorePassword Password for keyStore Yes spec.securityContext.keyStoreType KeyStore type Yes spec.securityContext.client.authType Type of client authentication. Defaults to DisabledAll . See https://goo.gl/1vKbXW for more options No spec.securityContext.client.protocols.[*] Accepted TLS protocols. Defaults to [ TLSv1.2 , TLSv1.1 , TLSv1 ] No spec.securityContext.debugging Turns ON or OFF ssl debugging. Defaults to false No spec.ex_rtpEngine.enabled If enabled, it will send all media thru the RTPEngine. Defaults to false No spec.ex_rtpEngine.proto Reserved to allow for NG commands via http , https , and udp . Currently only http is supported No spec.ex_rtpEngine.host Address for RTPEngine No spec.ex_rtpEngine.port Port for RTPEngine No spec.ex_convertTelToE164 If enabled, it will convert the number on ingress calls to E164 format before routing the call. Defaults to false No spec.ex_uniqueGatewayPerHostPort If enabled, it will yield an error if a Gateway with the same host and port combination already exists. Defaults to false No Variables prefixed with ex_ are experimental features and may be removed or renamed in the future. Transport Configuration \u00b6 Routr supports tcp , udp , tls , sctp , ws , and wss as transport protocols. The server requires at least one transport protocol. To bind a transport protocol to a specific IP address, you can use the spec.transport.bindAddr or more generally spec.bindAddr . Datasource Providers \u00b6 Routr currently implements two data providers: redis_data_provider and files_data_provider . The default data provider is the files_data_provider . The docker distribution of the server uses redis_data_provider by default Redis Data Provider \u00b6 The parameters for redis_data_provider are: Parameter Description Required host Redis host. Defaults to 'localhost' No port Redis port. The default port is 6379 No secret Password to access database No Files Data Provider \u00b6 The parameters for files_data_provider are: Parameter Description Required path Path to configuration files. Defaults to the config folder No This implementation has the limitation that writes operations have to be performed manually on the files. Configuring the server behind a NAT \u00b6 The spec.externAddr and spec.localnets parameters help Routr identify the correct path for any given traffic. The spec.externAddr is typically the Internet facing IP address. The spec.localnets is an array with valid CIDR, IP/Mask, or single IP values. Here is quick example: yaml spec: externAddr: 172.220.231.23 localnets: [172.17.0.2/16] Access Control List \u00b6 The Access Control List(ACL) provides with a security mechanism to disable network access from unwanted sources. ACL rules exist at general or Domain level. Here is an example, blocking all traffic except from IP address 192.168.0.1 . yaml spec: accessControlList: deny: [0.0.0.0/1] # Deny all allow: [192.168.0.1/31] Basic Example \u00b6 yaml apiVersion: v1beta1 spec: transport: - protocol: tcp port: 5060 - protocol: udp port: 5060","title":"General Configuration"},{"location":"configuration/general/#general-configuration-parameters","text":"Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes metadata.userAgent Sets sip header User-Agent to the desired value No spec.dataSource.provider Defines data provider. Defaults to files_data_provider No spec.dataSource.parameters Data Source Parameters. Ex.: 'host=localhost,port=6379' No spec.bindAddr Default stack IP address No spec.externAddr IP address to advertise No spec.localnets Local networks. Use in combination with spec.externAddr No spec.recordRoute Stay within the signaling path No spec.transport.[*].bindAddr Overwrites spec.bindAddr for transport entry No spec.transport.[*].port Transport port Yes spec.transport.[*].protocol Valid values are: tcp , udp , tls , sctp , ws , wss Yes spec.registrarIntf Internal causes the server to use the IP and port it \"sees\"(received & rport) from a device attempting to register. Defaults to External No spec.accessControlList.deny.[*] Deny incoming traffic from network list No spec.accessControlList.allow.[*] Allow incoming traffic from network list No spec.restService.bindAddr Restful service listening address No spec.restService.port Restful service port. Defaults to 4567 No spec.restService.minThreads Minimum thread allocation. Defaults to 8 No spec.restService.maxThreads Maximum thread allocation. Defaults to 200 No spec.restService.timeOutMillis Will reject requests that last more than this value. Defaults to 5000(5 seconds) No spec.restService.unsecured Disabled https for restful calls. Defaults to false No spec.restService.keyStore Path to keyStore No spec.restService.trueStore Path to trueStore No spec.restService.keyStorePassword Password for keyStore No spec.restService.trueStorePassword Password for trueStore No spec.securityContext.keyStore Path to keyStore Yes spec.securityContext.trustStore Path to trueStore Yes spec.securityContext.keyStorePassword Password for keyStore Yes spec.securityContext.keyStoreType KeyStore type Yes spec.securityContext.client.authType Type of client authentication. Defaults to DisabledAll . See https://goo.gl/1vKbXW for more options No spec.securityContext.client.protocols.[*] Accepted TLS protocols. Defaults to [ TLSv1.2 , TLSv1.1 , TLSv1 ] No spec.securityContext.debugging Turns ON or OFF ssl debugging. Defaults to false No spec.ex_rtpEngine.enabled If enabled, it will send all media thru the RTPEngine. Defaults to false No spec.ex_rtpEngine.proto Reserved to allow for NG commands via http , https , and udp . Currently only http is supported No spec.ex_rtpEngine.host Address for RTPEngine No spec.ex_rtpEngine.port Port for RTPEngine No spec.ex_convertTelToE164 If enabled, it will convert the number on ingress calls to E164 format before routing the call. Defaults to false No spec.ex_uniqueGatewayPerHostPort If enabled, it will yield an error if a Gateway with the same host and port combination already exists. Defaults to false No Variables prefixed with ex_ are experimental features and may be removed or renamed in the future.","title":"General Configuration Parameters"},{"location":"configuration/general/#transport-configuration","text":"Routr supports tcp , udp , tls , sctp , ws , and wss as transport protocols. The server requires at least one transport protocol. To bind a transport protocol to a specific IP address, you can use the spec.transport.bindAddr or more generally spec.bindAddr .","title":"Transport Configuration"},{"location":"configuration/general/#datasource-providers","text":"Routr currently implements two data providers: redis_data_provider and files_data_provider . The default data provider is the files_data_provider . The docker distribution of the server uses redis_data_provider by default","title":"Datasource Providers"},{"location":"configuration/general/#redis-data-provider","text":"The parameters for redis_data_provider are: Parameter Description Required host Redis host. Defaults to 'localhost' No port Redis port. The default port is 6379 No secret Password to access database No","title":"Redis Data Provider"},{"location":"configuration/general/#files-data-provider","text":"The parameters for files_data_provider are: Parameter Description Required path Path to configuration files. Defaults to the config folder No This implementation has the limitation that writes operations have to be performed manually on the files.","title":"Files Data Provider"},{"location":"configuration/general/#configuring-the-server-behind-a-nat","text":"The spec.externAddr and spec.localnets parameters help Routr identify the correct path for any given traffic. The spec.externAddr is typically the Internet facing IP address. The spec.localnets is an array with valid CIDR, IP/Mask, or single IP values. Here is quick example: yaml spec: externAddr: 172.220.231.23 localnets: [172.17.0.2/16]","title":"Configuring the server behind a NAT"},{"location":"configuration/general/#access-control-list","text":"The Access Control List(ACL) provides with a security mechanism to disable network access from unwanted sources. ACL rules exist at general or Domain level. Here is an example, blocking all traffic except from IP address 192.168.0.1 . yaml spec: accessControlList: deny: [0.0.0.0/1] # Deny all allow: [192.168.0.1/31]","title":"Access Control List"},{"location":"configuration/general/#basic-example","text":"yaml apiVersion: v1beta1 spec: transport: - protocol: tcp port: 5060 - protocol: udp port: 5060","title":"Basic Example"},{"location":"configuration/numbers/","text":"Numbers represent virtual numbers used to route calls from/to the PSTN through Gateways. The Numbers configuration can be provided using the file config/numbers.yml located at the root of your Routr installation. If using Redis this configuration gets stored in the database. Number Resource \u00b6 Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.ref Reference to this resource No metadata.gwRef Reference to parent Gateway Yes metadata.geoInfo.city City of the Number No metadata.geoInfo.country Country of the Number No metadata.geoInfo.countryISOCode The Country ISO code for the Number (i.e., US) No spec.location.telUrl Number URI available in the location server Yes spec.location.aorLink Address of record of SIP device for call routing Yes Example \u00b6 yaml - apiVersion: v1beta1 kind: Number metadata: ref: Number0001 gwRef: GW0001 geoInfo: city: Columbus, GA country: USA countryISOCode: US spec: location: telUrl: 'tel:17066041487' aorLink: 'sip:john@sip.local'","title":"Numbers(DID/DOD) Configuration"},{"location":"configuration/numbers/#number-resource","text":"Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.ref Reference to this resource No metadata.gwRef Reference to parent Gateway Yes metadata.geoInfo.city City of the Number No metadata.geoInfo.country Country of the Number No metadata.geoInfo.countryISOCode The Country ISO code for the Number (i.e., US) No spec.location.telUrl Number URI available in the location server Yes spec.location.aorLink Address of record of SIP device for call routing Yes","title":"Number Resource"},{"location":"configuration/numbers/#example","text":"yaml - apiVersion: v1beta1 kind: Number metadata: ref: Number0001 gwRef: GW0001 geoInfo: city: Columbus, GA country: USA countryISOCode: US spec: location: telUrl: 'tel:17066041487' aorLink: 'sip:john@sip.local'","title":"Example"},{"location":"configuration/peers/","text":"Like Agents, Peers represent SIP endpoints such as Media Servers. Unlike Agents, Peers aren't bound by a Domain. The Peers configuration can be provided using the file config/peers.yml located at the root of your Routr installation. If using Redis this configuration gets stored in the database. Peer Resource \u00b6 Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.name Friendly name for the SIP device Yes spec.credentials.username Peer's credential username Yes spec.credentials.secret Peer's credential secret Yes spec.device When set it is used by the location service No spec.contactAddr When set advertises this as the contactURI No Example \u00b6 yaml - apiVersion: v1beta1 kind: Peer metadata: name: Asterisk (Media Server) spec: credentials: username: ast secret: 'astsecret' device: astserver # If is not define the IP address will be used contactAddr: '192.168.1.2:6060' This peer can be reached using the AOR: ast@astserver .","title":"Peers Configuration"},{"location":"configuration/peers/#peer-resource","text":"Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.name Friendly name for the SIP device Yes spec.credentials.username Peer's credential username Yes spec.credentials.secret Peer's credential secret Yes spec.device When set it is used by the location service No spec.contactAddr When set advertises this as the contactURI No","title":"Peer Resource"},{"location":"configuration/peers/#example","text":"yaml - apiVersion: v1beta1 kind: Peer metadata: name: Asterisk (Media Server) spec: credentials: username: ast secret: 'astsecret' device: astserver # If is not define the IP address will be used contactAddr: '192.168.1.2:6060' This peer can be reached using the AOR: ast@astserver .","title":"Example"},{"location":"configuration/users/","text":"Users exist in Routr to perform administrative actions on a Routr instance. The Users configuration can be provided using the file config/users.yml located at the root of your Routr installation. If using Redis this configuration gets stored in the database. User Resource \u00b6 Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.name Friendly name for the User device Yes spec.credentials.username User's credential username Yes spec.credentials.secret User's credential secret Yes Example \u00b6 yaml - apiVersion: v1beta1 kind: User metadata: name: Administrator spec: credentials: username: admin secret: changeit Changing the password? (Redis) \u00b6 First, run the command redis-cli smembers users to obtain the reference to the user. Here is an example: $ redis-cli smembers users 1) \"5aa69ead8fd6861d92385bac\" Then, retrieve the document for reference running redis-cli get {REF} . For example $ redis-cli get 5aa69ead8fd6861d92385bac \"{\\\"apiVersion\\\":\\\"v1beta1\\\",\\\"kind\\\":\\\"User\\\",\\\"metadata\\\":{\\\"name\\\":\\\"Ctl\\\",\\\"ref\\\":\\\"5aa69ead8fd6861d92385bac\\\"},\\\"spec\\\":{\\\"credentials\\\":{\\\"username\\\":\\\"admin\\\",\\\"secret\\\":\\\"oldpass\\\"}}}\" Finally, search and change the old password and update your document using redis-cli set {REF} {DOCUMENT} . Like this: $ redis-cli set 5aa69ead8fd6861d92385bac \"{\\\"apiVersion\\\":\\\"v1beta1\\\",\\\"kind\\\":\\\"User\\\",\\\"metadata\\\":{\\\"name\\\":\\\"Ctl\\\",\\\"ref\\\":\\\"5aa69ead8fd6861d92385bac\\\"},\\\"spec\\\":{\\\"credentials\\\":{\\\"username\\\":\\\"admin\\\",\\\"secret\\\":\\\"newpass\\\"}}}\" A new token is issued after your next login with rctl","title":"Users Configuration"},{"location":"configuration/users/#user-resource","text":"Property Description Required apiVersion Indicates the version of the resource (Not yet implemented) Yes kind Defines the type of resource Yes metadata.name Friendly name for the User device Yes spec.credentials.username User's credential username Yes spec.credentials.secret User's credential secret Yes","title":"User Resource"},{"location":"configuration/users/#example","text":"yaml - apiVersion: v1beta1 kind: User metadata: name: Administrator spec: credentials: username: admin secret: changeit","title":"Example"},{"location":"configuration/users/#changing-the-password-redis","text":"First, run the command redis-cli smembers users to obtain the reference to the user. Here is an example: $ redis-cli smembers users 1) \"5aa69ead8fd6861d92385bac\" Then, retrieve the document for reference running redis-cli get {REF} . For example $ redis-cli get 5aa69ead8fd6861d92385bac \"{\\\"apiVersion\\\":\\\"v1beta1\\\",\\\"kind\\\":\\\"User\\\",\\\"metadata\\\":{\\\"name\\\":\\\"Ctl\\\",\\\"ref\\\":\\\"5aa69ead8fd6861d92385bac\\\"},\\\"spec\\\":{\\\"credentials\\\":{\\\"username\\\":\\\"admin\\\",\\\"secret\\\":\\\"oldpass\\\"}}}\" Finally, search and change the old password and update your document using redis-cli set {REF} {DOCUMENT} . Like this: $ redis-cli set 5aa69ead8fd6861d92385bac \"{\\\"apiVersion\\\":\\\"v1beta1\\\",\\\"kind\\\":\\\"User\\\",\\\"metadata\\\":{\\\"name\\\":\\\"Ctl\\\",\\\"ref\\\":\\\"5aa69ead8fd6861d92385bac\\\"},\\\"spec\\\":{\\\"credentials\\\":{\\\"username\\\":\\\"admin\\\",\\\"secret\\\":\\\"newpass\\\"}}}\" A new token is issued after your next login with rctl","title":"Changing the password? (Redis)"},{"location":"guides/basic-setup/","text":"This document is a step-by-step guide on VoIP setup at home or the office. For calls to the PSTN you need to have a SIP provider like voip.ms or did.logic.com . Content Requirements Setting up the Server Configuring the Gateway Configuring the Number Creating a new Domain and EgressPolicy Creating the Agents Configuring the SIP devices Making calls What's Next Requirements \u00b6 This tutorial assumes the following: Two SIP phones connected to the same LAN A fresh installation of Routr SIP providers such as voip.ms or did.logic.com Setting up the Server \u00b6 A set of sample configuration covering this scenario is available in the Github repo . You might overwrite the files in the config folder if you wish to skip this section. Configuring the Gateway \u00b6 To configure the Gateway, you must consult your SIP provider and obtain the credentials and registration host . The key fields for the configuration are metadata.ref , spec.regService.host and spec.regService.credentials . Here is an example: yml - apiVersion: v1beta1 kind: Gateway metadata: name: Provider Inc spec: host: sip.provider.net credentials: username: 'youruser' secret: 'yoursecret' transport: udp Configuring the Number \u00b6 To configure your Number or virtual number, you must open and edit the file config/numbers.yml . Notice in the example below, how your reference the Gateway by using the field metadata.geRef . The key field while configuring Numbers are spec.location.telUrl and spec.location.aorLink . Keep in mind that the value in spec.location.telUrl must be formatted, precisely, as sent by the provider. yml - apiVersion: v1beta1 kind: Number metadata: gwRef: gweef506 geoInfo: city: Columbus, GA country: USA countryISOCode: US spec: location: telUrl: 'tel:17066041487' aorLink: 'sip:1001@sip.local' Creating a new Domain and EgressPolicy \u00b6 Routr is a Domain centric SIP Server. A Domain is used to group several Agents in the same context. The Domain URI can be an arbitrary name, but we recommend using a fully qualified domain name (FQDN). You also need to configure an EgressPolicy to allow calls outside the Domain. Here is how the file config/domains.yml needs to look like: yml - apiVersion: v1beta1 kind: Domain metadata: name: Local Office spec: context: domainUri: sip.local egressPolicy: rule: .* numberRef: dd50baa4 Creating the Agents \u00b6 We now create the Agents 1001 and 1002 . Keep in mind that field spec.credentials.username can be alphanumeric, so john or john001 is also acceptable. Pay close attention to the credentials block since it contains the username and secret for both Agents. yml - apiVersion: v1beta1 kind: Agent metadata: name: John Doe spec: credentials: username: '1001' secret: '1234' domains: [sip.local] - apiVersion: v1beta1 kind: Agent metadata: name: Janie Doe spec: credentials: username: '1002' secret: '1234' domains: [sip.local] To verify your configuration, start the server by issuing the command routr . In a separate window, use the following commands: rctl get gateway rctl get number rctl get domain rctl get agents Your output should be as follows: Starting the Server Verifying the Configuration Configuring the SIP devices \u00b6 We are using \"Telephone\" for this example. You might use any softphone you wish, keep in mind that the configuration might look slightly different. Configure your softphone using the information you gather in the last step. Start by completing only the required information: username , domain , password . Also, In the advanced section use the server's IP as your Registry Server and Proxy . Here is how mine looks like: Make sure to check the box \"Use this account\" to register your device If everything went well, we only need to confirm that both softphones have registered correctly. Conveniently you can use the .rctl locate to obtain a list of registered devices. It may seem like much information. However, what's relevant here is that both 1001 and 1002 are present in the location service and therefore, can reach each other. Making calls \u00b6 The last step is easy. If everything went well, you are now able to call any device inside or outside your Domain. Use the destination URI (eg.: 1001@sip.local or 7853178060@sip.local ). What's Next? \u00b6 You can check out the wiki to see more examples. If you have any questions, start an issue or contact us via: Twitter: @fonoster Email: fonosterteam@fonoster.com","title":"Basic Setup"},{"location":"guides/basic-setup/#requirements","text":"This tutorial assumes the following: Two SIP phones connected to the same LAN A fresh installation of Routr SIP providers such as voip.ms or did.logic.com","title":"Requirements"},{"location":"guides/basic-setup/#setting-up-the-server","text":"A set of sample configuration covering this scenario is available in the Github repo . You might overwrite the files in the config folder if you wish to skip this section.","title":"Setting up the Server"},{"location":"guides/basic-setup/#configuring-the-gateway","text":"To configure the Gateway, you must consult your SIP provider and obtain the credentials and registration host . The key fields for the configuration are metadata.ref , spec.regService.host and spec.regService.credentials . Here is an example: yml - apiVersion: v1beta1 kind: Gateway metadata: name: Provider Inc spec: host: sip.provider.net credentials: username: 'youruser' secret: 'yoursecret' transport: udp","title":"Configuring the Gateway"},{"location":"guides/basic-setup/#configuring-the-number","text":"To configure your Number or virtual number, you must open and edit the file config/numbers.yml . Notice in the example below, how your reference the Gateway by using the field metadata.geRef . The key field while configuring Numbers are spec.location.telUrl and spec.location.aorLink . Keep in mind that the value in spec.location.telUrl must be formatted, precisely, as sent by the provider. yml - apiVersion: v1beta1 kind: Number metadata: gwRef: gweef506 geoInfo: city: Columbus, GA country: USA countryISOCode: US spec: location: telUrl: 'tel:17066041487' aorLink: 'sip:1001@sip.local'","title":"Configuring the Number"},{"location":"guides/basic-setup/#creating-a-new-domain-and-egresspolicy","text":"Routr is a Domain centric SIP Server. A Domain is used to group several Agents in the same context. The Domain URI can be an arbitrary name, but we recommend using a fully qualified domain name (FQDN). You also need to configure an EgressPolicy to allow calls outside the Domain. Here is how the file config/domains.yml needs to look like: yml - apiVersion: v1beta1 kind: Domain metadata: name: Local Office spec: context: domainUri: sip.local egressPolicy: rule: .* numberRef: dd50baa4","title":"Creating a new Domain and EgressPolicy"},{"location":"guides/basic-setup/#creating-the-agents","text":"We now create the Agents 1001 and 1002 . Keep in mind that field spec.credentials.username can be alphanumeric, so john or john001 is also acceptable. Pay close attention to the credentials block since it contains the username and secret for both Agents. yml - apiVersion: v1beta1 kind: Agent metadata: name: John Doe spec: credentials: username: '1001' secret: '1234' domains: [sip.local] - apiVersion: v1beta1 kind: Agent metadata: name: Janie Doe spec: credentials: username: '1002' secret: '1234' domains: [sip.local] To verify your configuration, start the server by issuing the command routr . In a separate window, use the following commands: rctl get gateway rctl get number rctl get domain rctl get agents Your output should be as follows: Starting the Server Verifying the Configuration","title":"Creating the Agents"},{"location":"guides/basic-setup/#configuring-the-sip-devices","text":"We are using \"Telephone\" for this example. You might use any softphone you wish, keep in mind that the configuration might look slightly different. Configure your softphone using the information you gather in the last step. Start by completing only the required information: username , domain , password . Also, In the advanced section use the server's IP as your Registry Server and Proxy . Here is how mine looks like: Make sure to check the box \"Use this account\" to register your device If everything went well, we only need to confirm that both softphones have registered correctly. Conveniently you can use the .rctl locate to obtain a list of registered devices. It may seem like much information. However, what's relevant here is that both 1001 and 1002 are present in the location service and therefore, can reach each other.","title":"Configuring the SIP devices"},{"location":"guides/basic-setup/#making-calls","text":"The last step is easy. If everything went well, you are now able to call any device inside or outside your Domain. Use the destination URI (eg.: 1001@sip.local or 7853178060@sip.local ).","title":"Making calls"},{"location":"guides/basic-setup/#whats-next","text":"You can check out the wiki to see more examples. If you have any questions, start an issue or contact us via: Twitter: @fonoster Email: fonosterteam@fonoster.com","title":"What's Next?"},{"location":"guides/benchmarking/","text":"Coming soon!","title":"Benchmarking"},{"location":"guides/routr-as-asterisk-frontend/","text":"This guide explores the use case of using Asterisk merely as a Media Server and more specialized software, like Routr, to take care of the signaling and resource management. In other words, Asterisk is in charge of the IVR, voice mail, call recording, while Routr deals with connecting Agents, Peers, and Gateways. The following illustration depicts our scenario: Content Requirements Configuration Overview Configuring Asterisk Calling Asterisk from John\u2019s device What\u2019s Next? Requirements \u00b6 This tutorial assumes the following: You have a SIP phone connected to the same LAN as Routr and Asterisk If using a hardware phone, this can reach Asterisk and Routr and the other way around You have a fresh installation of Routr and Asterisk Before starting this guide make sure to have a fresh installation of Routr server. Configuration Overview \u00b6 With a fresh installation of Routr , you have most of the configuration you need to follow this tutorial. We, however, need to make some minor changes to configuration files to run our scenario. The first file we need to examine and change is config/peers.yml . Make a note of the username and secret for the Peer \"ast\" since we are using this to configure Asterisk. Also, search for the field spec.device and change it to match the Agents domain( sip.local ). The file now looks similar to this: config/peers.yml yml - apiVersion: v1beta1 kind: Peer metadata: name: Asterisk PBX spec: device: 'sip.local' credentials: username: ast secret: '1234' Head to the console and run the command rctl -- get peers to confirm that the Peer exist. The result should be as follows: Next, we focus our attention on domains.yml and agents.yml . With a fresh installation, we don't need to make any changes to these files. However, you could run the commands get domains and get agents to ensure that both, the Agent and the Domain, exist on the server. Your output should look similar to: Use the information in agents.yml to configure your SIP phone. The relevant information is found in spec.credentials . Mine looks like this: Make the adjustments based on your prefer SIP phone. You can verify that your device registered correctly with Routr by running the locate command: Configuring Asterisk \u00b6 Using PJSIP Backup your pjsip.conf and pjsip_wizard.conf . Update your pjsip.conf with the following: [transport-tcp] type=transport protocol=tcp bind=0.0.0.0:6060 Then, in your pjsip_wizard.conf: [routr] type = wizard sends_auth = yes sends_registrations = yes remote_hosts = 192.168.1.2 outbound_auth/username = ast outbound_auth/password = 1234 registration/retry_interval = 10 registration/expiration = 900 endpoint/allow = ulaw endpoint/allow = alaw endpoint/allow = opus endpoint/context = default transport = transport-tcp Using the \"old\" Chan SIP First backup your sip.conf . Then, replace your configuration and edit the file to reflect the following: [general] udpbindaddr=0.0.0.0:6060 context=default register => ast:1234@192.168.1.2:5060/1001 ; This information must match the credentials in `config/peers.yml` Configuring the Dialplan We are going to use a very simple dialplan to play a sound file. Again, make a backup of your configuration and replace its content with this: [default] exten => 1001,1,Answer exten => 1001,n,Playback(tt-monkeys) exten => 1001,n,Hangup Restart your Asterisk and check the location service. A new device now appears. Calling Asterisk from John's device \u00b6 We can now call ast@sip.local and if everything went well listen to a group of really annoying monkeys :). What's Next? \u00b6 You can check out the wiki to see more examples. If you have any questions start an issue or contact us via: Twitter: @fonoster Email: fonosterteam@fonoster.com","title":"Routr as Asterisk frontend"},{"location":"guides/routr-as-asterisk-frontend/#requirements","text":"This tutorial assumes the following: You have a SIP phone connected to the same LAN as Routr and Asterisk If using a hardware phone, this can reach Asterisk and Routr and the other way around You have a fresh installation of Routr and Asterisk Before starting this guide make sure to have a fresh installation of Routr server.","title":"Requirements"},{"location":"guides/routr-as-asterisk-frontend/#configuration-overview","text":"With a fresh installation of Routr , you have most of the configuration you need to follow this tutorial. We, however, need to make some minor changes to configuration files to run our scenario. The first file we need to examine and change is config/peers.yml . Make a note of the username and secret for the Peer \"ast\" since we are using this to configure Asterisk. Also, search for the field spec.device and change it to match the Agents domain( sip.local ). The file now looks similar to this: config/peers.yml yml - apiVersion: v1beta1 kind: Peer metadata: name: Asterisk PBX spec: device: 'sip.local' credentials: username: ast secret: '1234' Head to the console and run the command rctl -- get peers to confirm that the Peer exist. The result should be as follows: Next, we focus our attention on domains.yml and agents.yml . With a fresh installation, we don't need to make any changes to these files. However, you could run the commands get domains and get agents to ensure that both, the Agent and the Domain, exist on the server. Your output should look similar to: Use the information in agents.yml to configure your SIP phone. The relevant information is found in spec.credentials . Mine looks like this: Make the adjustments based on your prefer SIP phone. You can verify that your device registered correctly with Routr by running the locate command:","title":"Configuration Overview"},{"location":"guides/routr-as-asterisk-frontend/#configuring-asterisk","text":"Using PJSIP Backup your pjsip.conf and pjsip_wizard.conf . Update your pjsip.conf with the following: [transport-tcp] type=transport protocol=tcp bind=0.0.0.0:6060 Then, in your pjsip_wizard.conf: [routr] type = wizard sends_auth = yes sends_registrations = yes remote_hosts = 192.168.1.2 outbound_auth/username = ast outbound_auth/password = 1234 registration/retry_interval = 10 registration/expiration = 900 endpoint/allow = ulaw endpoint/allow = alaw endpoint/allow = opus endpoint/context = default transport = transport-tcp Using the \"old\" Chan SIP First backup your sip.conf . Then, replace your configuration and edit the file to reflect the following: [general] udpbindaddr=0.0.0.0:6060 context=default register => ast:1234@192.168.1.2:5060/1001 ; This information must match the credentials in `config/peers.yml` Configuring the Dialplan We are going to use a very simple dialplan to play a sound file. Again, make a backup of your configuration and replace its content with this: [default] exten => 1001,1,Answer exten => 1001,n,Playback(tt-monkeys) exten => 1001,n,Hangup Restart your Asterisk and check the location service. A new device now appears.","title":"Configuring Asterisk"},{"location":"guides/routr-as-asterisk-frontend/#calling-asterisk-from-johns-device","text":"We can now call ast@sip.local and if everything went well listen to a group of really annoying monkeys :).","title":"Calling Asterisk from John's device"},{"location":"guides/routr-as-asterisk-frontend/#whats-next","text":"You can check out the wiki to see more examples. If you have any questions start an issue or contact us via: Twitter: @fonoster Email: fonosterteam@fonoster.com","title":"What's Next?"},{"location":"guides/routr-as-freeswitch-frontend/","text":"Coming soon!","title":"Routr as freeswitch frontend"},{"location":"guides/running-on-kubernetes/","text":"This document is a short guide about running the dockerized version of Routr Server on Kubernetes. Run in Kubernetes \u00b6 To run Routr in Kubernetes, you must set your EXTERN_ADDR in .k8s/routr.yml . This variable must be set to the public address(if running Routr locally, use your host address) Additionally, you must create the following Kubernetes resources: bash kubectl create -f k8s/configmaps.yml kubectl create -f k8s/redis.yml kubectl create -f k8s/routr.yml","title":"Running on Kubernetes"},{"location":"guides/running-on-kubernetes/#run-in-kubernetes","text":"To run Routr in Kubernetes, you must set your EXTERN_ADDR in .k8s/routr.yml . This variable must be set to the public address(if running Routr locally, use your host address) Additionally, you must create the following Kubernetes resources: bash kubectl create -f k8s/configmaps.yml kubectl create -f k8s/redis.yml kubectl create -f k8s/routr.yml","title":"Run in Kubernetes"},{"location":"guides/running-with-docker-or-compose/","text":"Please refer to Docker Hub for a detail guide on how to use Routr's docker image.","title":"Running with Docker or Compose"},{"location":"guides/securing-the-signaling-path/","text":"Follow this guide to secure the signaling between your endpoints and Routr. Keep in mind that Routr only secures the signaling and that the endpoints are ultimately responsible for securing the media. For this guide, we used a fictitious domain name to demonstrate the process of securing the signaling path Creating a Java Keystore(.JKS) certificate \u00b6 We need a keystore (.jks) to properly handling the certificates. The following steps create a valid keystore file using a self-signed method or using the free Let's Encrypt service . Creating a self-signed Certificate \u00b6 Perhaps the easiest way to create a valid certificate for Routr is using a self-signed certificate. To generate the certificate change into etc/certs in your Routr installation and run the following script: bash keytool -genkey -keyalg RSA \\ -noprompt \\ -alias routr \\ -keystore domains-cert.jks \\ -storepass changeit \\ -keypass changeit \\ -validity 365 \\ -keysize 2048 \\ -dname \"CN=sip.ocean.com, OU=OSS, O=Your Company Inc, L=Sanford, ST=NC, C=US\" \\ -ext SAN=dns:sip.ocean.com,dns:localhost,ip:127.0.0.1 Remember to adjust the values to match your project's information. WSS does not work with a self-signed certificate. However, you can add a security exception by using https instead of wss in your browser's search bar and then accepting the security certificate. Creating a Certificate using Let's Encrypt \u00b6 The recommended way to create a valid certificate for Routr is using the free service Let's Encrypt . Please go to https://letsencrypt.org/ for details on how to install the required tooling. To generate the certificate, use the following steps: \u278a Create keys bash certbot certonly --standalone -d sip.ocean.com --email admin@sip.ocean.com Change to the directory where we created the certificates(generally at /etc/letsencrypt/live/sip.ocean.com). \u278b Create a PKCS12 file containing full chain and private key bash openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out pkcs.p12 -name domains-cert.jks Please make a note of the password since you need it in the next step. \u278c Convert PKCS12 to Keystore bash keytool -importkeystore -srckeystore keystore.pkcs12 -srcstoretype PKCS12 -destkeystore domains-cert.jks Installing the Certificate in Routr \u00b6 To enable secure signaling in Routr, copy your certificate in etc/certs and edit the file config/config.yml to look like this: yml apiVersion: v1beta1 metadata: userAgent: Routr v1.0 spec: securityContext: keyStore: etc/certs/domains-cert.jks trustStore: etc/certs/domains-cert.jks keyStorePassword: 'changeit' trustStorePassword: 'changeit' keyStoreType: 'jks' debugging: true # Enabled debug only for testing transport: - protocol: tls port: 5061 ... If you set the property spec.securityContext.debugging to true , you can get some valuable information about the status of the configuration. You can also test your configuration using the following command: openssl s_client -host 192.168.1.2 -port 5061 # Remember to use Routr's IP Setting up the Sip Phones \u00b6 For this guide, we are using Blink Pro . Go to the account that you want to secure, select Advanced -> Sip Signaling and change the parameter Primary Proxy to ${proxyHost}:${proxyPort};transport=tls . See the example in the following image: If everything went well, you should see a green padlock like the one in the image below:","title":"Securing the Signaling Path"},{"location":"guides/securing-the-signaling-path/#creating-a-java-keystorejks-certificate","text":"We need a keystore (.jks) to properly handling the certificates. The following steps create a valid keystore file using a self-signed method or using the free Let's Encrypt service .","title":"Creating a Java Keystore(.JKS) certificate"},{"location":"guides/securing-the-signaling-path/#creating-a-self-signed-certificate","text":"Perhaps the easiest way to create a valid certificate for Routr is using a self-signed certificate. To generate the certificate change into etc/certs in your Routr installation and run the following script: bash keytool -genkey -keyalg RSA \\ -noprompt \\ -alias routr \\ -keystore domains-cert.jks \\ -storepass changeit \\ -keypass changeit \\ -validity 365 \\ -keysize 2048 \\ -dname \"CN=sip.ocean.com, OU=OSS, O=Your Company Inc, L=Sanford, ST=NC, C=US\" \\ -ext SAN=dns:sip.ocean.com,dns:localhost,ip:127.0.0.1 Remember to adjust the values to match your project's information. WSS does not work with a self-signed certificate. However, you can add a security exception by using https instead of wss in your browser's search bar and then accepting the security certificate.","title":"Creating a self-signed Certificate"},{"location":"guides/securing-the-signaling-path/#creating-a-certificate-using-lets-encrypt","text":"The recommended way to create a valid certificate for Routr is using the free service Let's Encrypt . Please go to https://letsencrypt.org/ for details on how to install the required tooling. To generate the certificate, use the following steps: \u278a Create keys bash certbot certonly --standalone -d sip.ocean.com --email admin@sip.ocean.com Change to the directory where we created the certificates(generally at /etc/letsencrypt/live/sip.ocean.com). \u278b Create a PKCS12 file containing full chain and private key bash openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out pkcs.p12 -name domains-cert.jks Please make a note of the password since you need it in the next step. \u278c Convert PKCS12 to Keystore bash keytool -importkeystore -srckeystore keystore.pkcs12 -srcstoretype PKCS12 -destkeystore domains-cert.jks","title":"Creating a Certificate using Let's Encrypt"},{"location":"guides/securing-the-signaling-path/#installing-the-certificate-in-routr","text":"To enable secure signaling in Routr, copy your certificate in etc/certs and edit the file config/config.yml to look like this: yml apiVersion: v1beta1 metadata: userAgent: Routr v1.0 spec: securityContext: keyStore: etc/certs/domains-cert.jks trustStore: etc/certs/domains-cert.jks keyStorePassword: 'changeit' trustStorePassword: 'changeit' keyStoreType: 'jks' debugging: true # Enabled debug only for testing transport: - protocol: tls port: 5061 ... If you set the property spec.securityContext.debugging to true , you can get some valuable information about the status of the configuration. You can also test your configuration using the following command: openssl s_client -host 192.168.1.2 -port 5061 # Remember to use Routr's IP","title":"Installing the Certificate in Routr"},{"location":"guides/securing-the-signaling-path/#setting-up-the-sip-phones","text":"For this guide, we are using Blink Pro . Go to the account that you want to secure, select Advanced -> Sip Signaling and change the parameter Primary Proxy to ${proxyHost}:${proxyPort};transport=tls . See the example in the following image: If everything went well, you should see a green padlock like the one in the image below:","title":"Setting up the Sip Phones"},{"location":"introduction/community/","text":"Routr is developed in the open. Here are some of the channels we use to communicate and contribute: Discord community GitHub Discussions User mailing lists: routr-announce \u2013 for announcements like new releases routr-users \u2013 for discussions around Routr usage and community support Twitter: @Fonoster Issue tracker: Use the GitHub issue tracker for the various Routr repositories to file bugs and features request. If you need support, please send your questions to the routr-users mailing list rather than filing a GitHub issue. Please do not ask individual project members for support. Use the channels above instead, where the whole community can help you and benefit from the solutions provided. If community support is insufficient for your situation, please refer to the Commercial Support section below. Contributing \u00b6 We welcome community contributions! Please see the CONTRIBUTING.md file in the respective Routr repository for instructions on how to submit changes. If you are planning on making more elaborate or controversial changes, please discuss them on the mailing list before sending a pull request. Development: GitHub Discussions \u2013 for discussions around Routr development Developer Summits \u00b6 We strive to be as open and public as possible. Technical discussions happen on the development list, our in-person meeting notes are public, and we have public calls. Below, you can find links to our developer summits at JConfDominicana 2019. 2019 developer summit notes (Come back to see updated link) Code of Conduct \u00b6 To make Routr a welcoming and harassment-free experience for everyone, we follow the Contributor Covenant Code of Conduct . Commercial Support \u00b6 The following is a list of third-party companies and individuals who provide products or services related to Routr. Routr is an independent open source project which does not endorse any company. This list goes down alphabetically. Pedro Sanders (independent contractor) Acknowledgments \u00b6 Routr was developed initially by Pedro Sanders . Fonoster sponsored the majority of its development. Pedro Sanders contributed Routr's logo.","title":"Community"},{"location":"introduction/community/#contributing","text":"We welcome community contributions! Please see the CONTRIBUTING.md file in the respective Routr repository for instructions on how to submit changes. If you are planning on making more elaborate or controversial changes, please discuss them on the mailing list before sending a pull request. Development: GitHub Discussions \u2013 for discussions around Routr development","title":"Contributing"},{"location":"introduction/community/#developer-summits","text":"We strive to be as open and public as possible. Technical discussions happen on the development list, our in-person meeting notes are public, and we have public calls. Below, you can find links to our developer summits at JConfDominicana 2019. 2019 developer summit notes (Come back to see updated link)","title":"Developer Summits"},{"location":"introduction/community/#code-of-conduct","text":"To make Routr a welcoming and harassment-free experience for everyone, we follow the Contributor Covenant Code of Conduct .","title":"Code of Conduct"},{"location":"introduction/community/#commercial-support","text":"The following is a list of third-party companies and individuals who provide products or services related to Routr. Routr is an independent open source project which does not endorse any company. This list goes down alphabetically. Pedro Sanders (independent contractor)","title":"Commercial Support"},{"location":"introduction/community/#acknowledgments","text":"Routr was developed initially by Pedro Sanders . Fonoster sponsored the majority of its development. Pedro Sanders contributed Routr's logo.","title":"Acknowledgments"},{"location":"introduction/comparison/","text":"A question we always get is how Routr compares to other software such as Asterisk, FreeSWITCH, or Kamailio. For a fair comparison, we separate this into two basic categories: SIP Servers and PBX. Routr vs Asterisk/FreeSWITCH? \u00b6 Asterisk and FreeSWITCH fall into the PBX category. Their role is to provide media capabilities such as IVR, Voicemail, Conferencing, Recording, and even video. Both Asterisk and FreeSWITCH are very good at what they do, each with their strengths and weaknesses. Routr is not a PBX and does not pretend to solve the same issue. Routr focuses on the SIP Server role. Routr vs Kamailio/OpenSER? \u00b6 Typically, large VoIP networks and Unified Communication platforms include SIP servers of some sort. The perform the following functions: Proxy, Registrar, Location, Forking, Redirect Load Balancing Session Border Controller Gateway to the PSTN Routr attempts to solve the same core problems as Kamailio/OpenSER but with a different approach. So what is the problem with Kamailio/OpenSER? \u00b6 Kamailio is an impressive piece of software but is not ready-to-use like Asterisk or FreeSWITCH. To get it to work, you have to understand SIP and write some code. What can we do to make it better? \u00b6 Our vision for a Next-generation SIP Server can be summarized as follows: Make Routr Cloud-Native (After all it is 2019) It does not require any coding / Most use-cases are configurable Offer the tooling and APIs for easy extensibility Great documentation If you want to support the initiative, please join the discussion .","title":"Comparison to Alternatives"},{"location":"introduction/comparison/#routr-vs-asteriskfreeswitch","text":"Asterisk and FreeSWITCH fall into the PBX category. Their role is to provide media capabilities such as IVR, Voicemail, Conferencing, Recording, and even video. Both Asterisk and FreeSWITCH are very good at what they do, each with their strengths and weaknesses. Routr is not a PBX and does not pretend to solve the same issue. Routr focuses on the SIP Server role.","title":"Routr vs Asterisk/FreeSWITCH?"},{"location":"introduction/comparison/#routr-vs-kamailioopenser","text":"Typically, large VoIP networks and Unified Communication platforms include SIP servers of some sort. The perform the following functions: Proxy, Registrar, Location, Forking, Redirect Load Balancing Session Border Controller Gateway to the PSTN Routr attempts to solve the same core problems as Kamailio/OpenSER but with a different approach.","title":"Routr vs Kamailio/OpenSER?"},{"location":"introduction/comparison/#so-what-is-the-problem-with-kamailioopenser","text":"Kamailio is an impressive piece of software but is not ready-to-use like Asterisk or FreeSWITCH. To get it to work, you have to understand SIP and write some code.","title":"So what is the problem with Kamailio/OpenSER?"},{"location":"introduction/comparison/#what-can-we-do-to-make-it-better","text":"Our vision for a Next-generation SIP Server can be summarized as follows: Make Routr Cloud-Native (After all it is 2019) It does not require any coding / Most use-cases are configurable Offer the tooling and APIs for easy extensibility Great documentation If you want to support the initiative, please join the discussion .","title":"What can we do to make it better?"},{"location":"introduction/faq/","text":"What is Routr? \u00b6 Routr is an open-source SIP Server and tooling to deploy VoIP networks. See the overview . What dependencies does Routr have? \u00b6 Routr server runs standalone and has no external dependencies. However, you might need to use Redis depending in the complexity of your requirements. How does Routr compare with other SIP servers \u00b6 See the comparison page . What language is used to develop Routr? \u00b6 Most components in Routr are written in Javascript(with Oracle's GraalJS). What license does Routr uses? \u00b6 Routr is released under the MIT license.","title":"FAQ"},{"location":"introduction/faq/#what-is-routr","text":"Routr is an open-source SIP Server and tooling to deploy VoIP networks. See the overview .","title":"What is Routr?"},{"location":"introduction/faq/#what-dependencies-does-routr-have","text":"Routr server runs standalone and has no external dependencies. However, you might need to use Redis depending in the complexity of your requirements.","title":"What dependencies does Routr have?"},{"location":"introduction/faq/#how-does-routr-compare-with-other-sip-servers","text":"See the comparison page .","title":"How does Routr compare with other SIP servers"},{"location":"introduction/faq/#what-language-is-used-to-develop-routr","text":"Most components in Routr are written in Javascript(with Oracle's GraalJS).","title":"What language is used to develop Routr?"},{"location":"introduction/faq/#what-license-does-routr-uses","text":"Routr is released under the MIT license.","title":"What license does Routr uses?"},{"location":"introduction/glossary/","text":"This following table features some essential concepts, including the different routing types implemented by the server. User \u00b6 Users perform administrative actions on the server. Agent \u00b6 Agents represent SIP endpoints such as softphones and IP phones, or paging speakers. Domain \u00b6 Enables the creation of isolated groups of Agents Peer \u00b6 Similar to Agents but without Domain boundaries Gateway \u00b6 IP entity that allows call termination Number \u00b6 Routes and translate calls between the PSTN and Routr Intra-Domain Routing (IDR) \u00b6 Routing strategy for signaling within the same Domain Domain Ingress Routing (DIR) \u00b6 Routing strategy used when an Agent or Peer must go outside the Domain using a Gateway Domain Egress Routing (DER) \u00b6 Calling from an Agent to the PSTN thru a Gateway Peer Egress Routing (PER) \u00b6 Similar to DER but applies only to Peers.","title":"Glossary"},{"location":"introduction/glossary/#user","text":"Users perform administrative actions on the server.","title":"User"},{"location":"introduction/glossary/#agent","text":"Agents represent SIP endpoints such as softphones and IP phones, or paging speakers.","title":"Agent"},{"location":"introduction/glossary/#domain","text":"Enables the creation of isolated groups of Agents","title":"Domain"},{"location":"introduction/glossary/#peer","text":"Similar to Agents but without Domain boundaries","title":"Peer"},{"location":"introduction/glossary/#gateway","text":"IP entity that allows call termination","title":"Gateway"},{"location":"introduction/glossary/#number","text":"Routes and translate calls between the PSTN and Routr","title":"Number"},{"location":"introduction/glossary/#intra-domain-routing-idr","text":"Routing strategy for signaling within the same Domain","title":"Intra-Domain Routing (IDR)"},{"location":"introduction/glossary/#domain-ingress-routing-dir","text":"Routing strategy used when an Agent or Peer must go outside the Domain using a Gateway","title":"Domain Ingress Routing (DIR)"},{"location":"introduction/glossary/#domain-egress-routing-der","text":"Calling from an Agent to the PSTN thru a Gateway","title":"Domain Egress Routing (DER)"},{"location":"introduction/glossary/#peer-egress-routing-per","text":"Similar to DER but applies only to Peers.","title":"Peer Egress Routing (PER)"},{"location":"introduction/installation/","text":"Instant Server Installation with Snaps \u00b6 Install Routr in seconds on Linux (Ubuntu and others) with: bash sudo snap install routr-server Routr Snap is recommended for Linux deployments Installing snaps is very quick. By running that command you have your full Routr server up and running. Snaps are secure. They are isolated with all of their dependencies. Snaps also auto-update when we release new versions. DigitalOcean droplet \u00b6 Build and Deploy to a DigitalOcean droplet Docker \u00b6 Deploy with docker compose OR Use the automated build image of our most recent release docker pull fonoster/routr:latest OR select a specific release ( details of releases available ): docker pull fonoster/routr:vX.X.X Kubernetes \u00b6 Deploy to Kubernetes in few easy steps Google Cloud Shell \u00b6 Routr one-click interactive tutorial will get you familiar with Routr server and the command-line interface. Custom \u00b6 There are no special requirements to install and run the server. Just follow this easy steps: \u278a Download the server for your platform Platform Download Linux tar.gz macOS tar.gz Windows tar.gz , zip \u278b Then extract it: bash tar xvfz routr-*.tar.gz cd routr-* \u278c Run the server using the routr command bash ./routr","title":"Installation"},{"location":"introduction/installation/#instant-server-installation-with-snaps","text":"Install Routr in seconds on Linux (Ubuntu and others) with: bash sudo snap install routr-server Routr Snap is recommended for Linux deployments Installing snaps is very quick. By running that command you have your full Routr server up and running. Snaps are secure. They are isolated with all of their dependencies. Snaps also auto-update when we release new versions.","title":"Instant Server Installation with Snaps"},{"location":"introduction/installation/#digitalocean-droplet","text":"Build and Deploy to a DigitalOcean droplet","title":"DigitalOcean droplet"},{"location":"introduction/installation/#docker","text":"Deploy with docker compose OR Use the automated build image of our most recent release docker pull fonoster/routr:latest OR select a specific release ( details of releases available ): docker pull fonoster/routr:vX.X.X","title":"Docker"},{"location":"introduction/installation/#kubernetes","text":"Deploy to Kubernetes in few easy steps","title":"Kubernetes"},{"location":"introduction/installation/#google-cloud-shell","text":"Routr one-click interactive tutorial will get you familiar with Routr server and the command-line interface.","title":"Google Cloud Shell"},{"location":"introduction/installation/#custom","text":"There are no special requirements to install and run the server. Just follow this easy steps: \u278a Download the server for your platform Platform Download Linux tar.gz macOS tar.gz Windows tar.gz , zip \u278b Then extract it: bash tar xvfz routr-*.tar.gz cd routr-* \u278c Run the server using the routr command bash ./routr","title":"Custom"},{"location":"introduction/media/","text":"There is a subreddit collecting all Routr-related resources on the internet. The following selection of resources is particularly useful to get started with Routr. Blogs \u00b6 Getting started with Routr SIP Server Migrating Routr from Nashorn to GraalJS: Lessons Learn Tutorials \u00b6 Instructions and example a basic setup of Routr","title":"Media"},{"location":"introduction/media/#blogs","text":"Getting started with Routr SIP Server Migrating Routr from Nashorn to GraalJS: Lessons Learn","title":"Blogs"},{"location":"introduction/media/#tutorials","text":"Instructions and example a basic setup of Routr","title":"Tutorials"},{"location":"introduction/overview/","text":"What is Routr? \u00b6 Routr is a lightweight sip proxy, location server, and registrar that provides a reliable and scalable SIP infrastructure for telephony carriers, communication service providers, and integrators. It also provides with capabilities that are suitable for the enterprise and personal needs. To get involved in the development of this project, please contact us at @fonoster . Features \u00b6 Routr's main features are: Typical Sip Server functions; Proxy, Registrar, Location Service Per node Multi-Tenancy/Multi-Domain with Domain level Access Control List Transport: TCP, UDP, TLS, WebSocket Routr currently supports Redis, HTTP Requests, and YAML files as the data source Server management and monitoring with the RESTful API, CLI, and Web Console Configurable routing strategies; Intra-Domain, Domain Ingress, Domain Egress and Peer Egress Components \u00b6 The Routr ecosystem consists of three main components: The Routr server which is the main component of the ecosystem The command-line interface, rctl , for remote management of the server An optional web console for easy management of the server Architecture \u00b6 This diagram illustrates the architecture of Routr and some of its ecosystem components: At the center of Routr are the routing rules. These rules are the core of Routr, in addition to the typical SIP Server the functions such as Proxy, Location, and Registrar. The primary integration points are the data abstraction layer, the event publisher, and the RESTful API. This integration points, allow for easy integration with third-party software. Use cases \u00b6 Routr specializes in the management of SIP resources and domain-centric routing strategies. It works well in front of the Media servers like Asterisk or FreeSWITCH. Routr runs in all major operating systems, in Docker , and Kubernetes . Unlike Kamailio and OpenSIPS, Routr does not require any scripting to perform any of its typical routing tasks. Routing rules are configured, not programmed. The monitoring tasks are centralized using a RESTful API, and from that API, it is possible to control de service using the command-line interface or the web UI.","title":"Overview"},{"location":"introduction/overview/#what-is-routr","text":"Routr is a lightweight sip proxy, location server, and registrar that provides a reliable and scalable SIP infrastructure for telephony carriers, communication service providers, and integrators. It also provides with capabilities that are suitable for the enterprise and personal needs. To get involved in the development of this project, please contact us at @fonoster .","title":"What is Routr?"},{"location":"introduction/overview/#features","text":"Routr's main features are: Typical Sip Server functions; Proxy, Registrar, Location Service Per node Multi-Tenancy/Multi-Domain with Domain level Access Control List Transport: TCP, UDP, TLS, WebSocket Routr currently supports Redis, HTTP Requests, and YAML files as the data source Server management and monitoring with the RESTful API, CLI, and Web Console Configurable routing strategies; Intra-Domain, Domain Ingress, Domain Egress and Peer Egress","title":"Features"},{"location":"introduction/overview/#components","text":"The Routr ecosystem consists of three main components: The Routr server which is the main component of the ecosystem The command-line interface, rctl , for remote management of the server An optional web console for easy management of the server","title":"Components"},{"location":"introduction/overview/#architecture","text":"This diagram illustrates the architecture of Routr and some of its ecosystem components: At the center of Routr are the routing rules. These rules are the core of Routr, in addition to the typical SIP Server the functions such as Proxy, Location, and Registrar. The primary integration points are the data abstraction layer, the event publisher, and the RESTful API. This integration points, allow for easy integration with third-party software.","title":"Architecture"},{"location":"introduction/overview/#use-cases","text":"Routr specializes in the management of SIP resources and domain-centric routing strategies. It works well in front of the Media servers like Asterisk or FreeSWITCH. Routr runs in all major operating systems, in Docker , and Kubernetes . Unlike Kamailio and OpenSIPS, Routr does not require any scripting to perform any of its typical routing tasks. Routing rules are configured, not programmed. The monitoring tasks are centralized using a RESTful API, and from that API, it is possible to control de service using the command-line interface or the web UI.","title":"Use cases"},{"location":"introduction/roadmap/","text":"The following is only a selection of some of the major features we plan to implement soon. To get a complete overview of planned features and current work, see the issue trackers for the various repositories, for example, the Routr server . Accounting, Authentication, and Authorization \u00b6 Routr does not currently provide any mechanism for aid the accounting. Our current priority is to implement a module to support pushing accounting, authentication, and authorization events. IM and Presence \u00b6 We understand that instant-messaging and presence are an essential piece of any VoIP network. We are currently looking into the SIMPLE and XCAP protocols to provide IM and Presence in Routr. Per-domain Certificate \u00b6 Routr, currently its only possible to install a single certificate with multiple-domains. In the future, we want to ease the certificate installation/updating process by allowing a per-domain certificate. Support the Ecosystem \u00b6 We want to release a stable version of the web UI soon. The web UI is one of our primary strategy to facilitate the deployment of VoIP networks with Routr.","title":"Roadmap"},{"location":"introduction/roadmap/#accounting-authentication-and-authorization","text":"Routr does not currently provide any mechanism for aid the accounting. Our current priority is to implement a module to support pushing accounting, authentication, and authorization events.","title":"Accounting, Authentication, and Authorization"},{"location":"introduction/roadmap/#im-and-presence","text":"We understand that instant-messaging and presence are an essential piece of any VoIP network. We are currently looking into the SIMPLE and XCAP protocols to provide IM and Presence in Routr.","title":"IM and Presence"},{"location":"introduction/roadmap/#per-domain-certificate","text":"Routr, currently its only possible to install a single certificate with multiple-domains. In the future, we want to ease the certificate installation/updating process by allowing a per-domain certificate.","title":"Per-domain Certificate"},{"location":"introduction/roadmap/#support-the-ecosystem","text":"We want to release a stable version of the web UI soon. The web UI is one of our primary strategy to facilitate the deployment of VoIP networks with Routr.","title":"Support the Ecosystem"},{"location":"introduction/test-plan/","text":"Test Plan \u00b6 DUT and Endpoints Configuration \u00b6 Routr has a Gateway resource configured to use TCP transport. The Gateway resource is configured with a range of E.164 numbers. Routr is configured to support Registration mode. A Domain named sip.local exist with Agents 1001@sip.local and 1002@sip.local The Gateway is capable of handling RFC6140 registrations Test Case Summary \u00b6 Test Case ID Title Required 1.1.1 Registration Setup Yes 1.1.2 Registration Failure Yes 1.1.3 Maintaining Registration Yes 1.1.4 Authentication Yes 1.1.5 TLS Server Mode No 1.2.1 DNS Lookup Yes 1.2.2 Static Mode Failure Detection No 1.2.3 TLS Authentication No 1.2.4 TLS Certificate Validation No 1.3.1 Intra-Domain Routing / Successful Invite Setup Yes 1.3.2 Intra-Domain Routing / Invite Rejected by Callee Yes 1.3.3 Intra-Domain Routing / Invite Cancelled by Caller Yes 1.3.4 Intra-Domain Routing / Invite Cancelled by Callee Yes 1.4.1 Domain-Ingress Routing / Successful Invite Setup Yes 1.4.2 Domain-Ingress Routing / Invite Rejected by Callee Yes 1.4.3 Domain-Ingress Routing / Invite Cancelled by Caller Yes 1.4.4 Domain-Ingress Routing / Invite Cancelled by Callee Yes 1.5.1 Domain-Egress Routing / Successful Invite Setup Yes 1.5.2 Domain-Egress Routing / Invite Rejected by Callee Yes 1.5.3 Domain-Egress Routing / Invite Cancelled by Caller Yes 1.5.4 Domain-Egress Routing / Invite Cancelled by Callee Yes 1.6.1 Peer-Egress Routing / Successful Invite Setup Yes Test Cases \u00b6 Test Case 1.1.1: Registration Setup \u00b6 Objective : This section tests the registration compatibility between Routr and the SIP Trunk provider. If the SIP Trunk provider under testing is IP-based, this section can be skipped. Procedure : Description Expected Result Step 1 Restart Routr to send a REGISTER message to the Gateway Routr restarts Step 2 Wait for the server to restart UAS receives correct registration sequence Step 3 Clear the registration table Registry table is empty","title":"Test Plan"},{"location":"introduction/test-plan/#test-plan","text":"","title":"Test Plan"},{"location":"introduction/test-plan/#dut-and-endpoints-configuration","text":"Routr has a Gateway resource configured to use TCP transport. The Gateway resource is configured with a range of E.164 numbers. Routr is configured to support Registration mode. A Domain named sip.local exist with Agents 1001@sip.local and 1002@sip.local The Gateway is capable of handling RFC6140 registrations","title":"DUT and Endpoints Configuration"},{"location":"introduction/test-plan/#test-case-summary","text":"Test Case ID Title Required 1.1.1 Registration Setup Yes 1.1.2 Registration Failure Yes 1.1.3 Maintaining Registration Yes 1.1.4 Authentication Yes 1.1.5 TLS Server Mode No 1.2.1 DNS Lookup Yes 1.2.2 Static Mode Failure Detection No 1.2.3 TLS Authentication No 1.2.4 TLS Certificate Validation No 1.3.1 Intra-Domain Routing / Successful Invite Setup Yes 1.3.2 Intra-Domain Routing / Invite Rejected by Callee Yes 1.3.3 Intra-Domain Routing / Invite Cancelled by Caller Yes 1.3.4 Intra-Domain Routing / Invite Cancelled by Callee Yes 1.4.1 Domain-Ingress Routing / Successful Invite Setup Yes 1.4.2 Domain-Ingress Routing / Invite Rejected by Callee Yes 1.4.3 Domain-Ingress Routing / Invite Cancelled by Caller Yes 1.4.4 Domain-Ingress Routing / Invite Cancelled by Callee Yes 1.5.1 Domain-Egress Routing / Successful Invite Setup Yes 1.5.2 Domain-Egress Routing / Invite Rejected by Callee Yes 1.5.3 Domain-Egress Routing / Invite Cancelled by Caller Yes 1.5.4 Domain-Egress Routing / Invite Cancelled by Callee Yes 1.6.1 Peer-Egress Routing / Successful Invite Setup Yes","title":"Test Case Summary"},{"location":"introduction/test-plan/#test-cases","text":"","title":"Test Cases"},{"location":"introduction/test-plan/#test-case-111-registration-setup","text":"Objective : This section tests the registration compatibility between Routr and the SIP Trunk provider. If the SIP Trunk provider under testing is IP-based, this section can be skipped. Procedure : Description Expected Result Step 1 Restart Routr to send a REGISTER message to the Gateway Routr restarts Step 2 Wait for the server to restart UAS receives correct registration sequence Step 3 Clear the registration table Registry table is empty","title":"Test Case 1.1.1: Registration Setup"},{"location":"introduction/performance-tests/user-location/","text":"Routr 1.0RC3 - User Location Lookup Performance Tests \u00b6 Author: Pedro Sanders Overview User Location Performance Tests New registrations Update registrations User location lookup Conclusions Notes References Overview \u00b6 Scope \u00b6 These tests were intended to show the performances of the User Location implementation in Routr 1.0RC3. These can be useful to help you better dimension your Routr installation. For these test the login module was deactivated. The network configuration used during the test is depicted in the following image: Software \u00b6 As load generator (UAC side) it was used SIPp docker image. All used SIP-related software was configured to use TCP as the transport protocol for SIP. Platform \u00b6 Description of the elements used: Equipment #1 - [Processor], [Memory] with [Operating system] testing. Equipment #2 - [Processor], [Memory] with [Operating system] testing. Equipment #x - [Processor], [Memory] with [Operating system] testing. Performance Tests \u00b6 Routr running without any special SIPp was used to generate [# of interaction] MESSAGE requests via Routr. The results reflect the capacity [General or sub topic] and speed (average response time). Flow SIP entities definition: UAC - [UAC]:5070 UAS - [UAS]:5070 Proxy - [PROXY_IP]:5060 SIP messages flow for one complete transaction: UAC ---> MESSAGE ---> Routr ---> MESSAGE ---> UAS UAC <--- 200 OK <--- Routr <--- 200 OK <--- UAS Configuration SIPP command: bash [Used SIPp command config ] Results Results reported by SIPp on the UAC servers: Factor Value Note Iterations 200000 Max concurrent requests 70 Max allowed Rate 10000 requests per second Average Request Rate 8047.966 requests per second Failures 0 Retransmissions 0 Timeout 0 Elapsed Time 00:00:24:851 00:00:24:851 Routr config file: yaml [Whatever config applies] [Graphical results] Conclusions Notes References","title":"User Location"},{"location":"introduction/performance-tests/user-location/#routr-10rc3-user-location-lookup-performance-tests","text":"Author: Pedro Sanders Overview User Location Performance Tests New registrations Update registrations User location lookup Conclusions Notes References","title":"Routr 1.0RC3 - User Location Lookup Performance Tests"},{"location":"introduction/performance-tests/user-location/#overview","text":"","title":"Overview"},{"location":"introduction/performance-tests/user-location/#scope","text":"These tests were intended to show the performances of the User Location implementation in Routr 1.0RC3. These can be useful to help you better dimension your Routr installation. For these test the login module was deactivated. The network configuration used during the test is depicted in the following image:","title":"Scope"},{"location":"introduction/performance-tests/user-location/#software","text":"As load generator (UAC side) it was used SIPp docker image. All used SIP-related software was configured to use TCP as the transport protocol for SIP.","title":"Software"},{"location":"introduction/performance-tests/user-location/#platform","text":"Description of the elements used: Equipment #1 - [Processor], [Memory] with [Operating system] testing. Equipment #2 - [Processor], [Memory] with [Operating system] testing. Equipment #x - [Processor], [Memory] with [Operating system] testing.","title":"Platform"},{"location":"introduction/performance-tests/user-location/#performance-tests","text":"Routr running without any special SIPp was used to generate [# of interaction] MESSAGE requests via Routr. The results reflect the capacity [General or sub topic] and speed (average response time). Flow SIP entities definition: UAC - [UAC]:5070 UAS - [UAS]:5070 Proxy - [PROXY_IP]:5060 SIP messages flow for one complete transaction: UAC ---> MESSAGE ---> Routr ---> MESSAGE ---> UAS UAC <--- 200 OK <--- Routr <--- 200 OK <--- UAS Configuration SIPP command: bash [Used SIPp command config ] Results Results reported by SIPp on the UAC servers: Factor Value Note Iterations 200000 Max concurrent requests 70 Max allowed Rate 10000 requests per second Average Request Rate 8047.966 requests per second Failures 0 Retransmissions 0 Timeout 0 Elapsed Time 00:00:24:851 00:00:24:851 Routr config file: yaml [Whatever config applies] [Graphical results] Conclusions Notes References","title":"Performance Tests"}]}