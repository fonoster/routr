"use strict";(self.webpackChunkroutr_docs=self.webpackChunkroutr_docs||[]).push([[6531],{8039:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var o=t(4848),i=t(8453);const l={},s="Extending the Command-Line Tool",r={id:"development/extending-the-ctl",title:"Extending the Command-Line Tool",description:"Routr's command-line tool (CTL) is a powerful tool that lets you manage your Routr Connect server. Our team built the CTL with Oclif, a framework for creating command-line tools in Node.js.",source:"@site/versioned_docs/version-2.0.0/development/extending-the-ctl.md",sourceDirName:"development",slug:"/development/extending-the-ctl",permalink:"/docs/2.0.0/development/extending-the-ctl",draft:!1,unlisted:!1,editUrl:"https://github.com/fonoster/routr-website/edit/main/versioned_docs/version-2.0.0/development/extending-the-ctl.md",tags:[],version:"2.0.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom data with the APIServer",permalink:"/docs/2.0.0/development/custom-data-with-the-apiserver"},next:{title:"Introduction",permalink:"/docs/2.0.0/connect/introduction"}},a={},c=[{value:"Installing the Command-Line Tool",id:"installing-the-command-line-tool",level:2},{value:"Using the Command-Line Tool",id:"using-the-command-line-tool",level:2},{value:"Creating a plugin",id:"creating-a-plugin",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"extending-the-command-line-tool",children:"Extending the Command-Line Tool"}),"\n",(0,o.jsxs)(n.p,{children:["Routr's command-line tool (CTL) is a powerful tool that lets you manage your Routr Connect server. Our team built the CTL with ",(0,o.jsx)(n.a,{href:"https://oclif.io/",children:"Oclif"}),", a framework for creating command-line tools in Node.js."]}),"\n",(0,o.jsx)(n.p,{children:"You can extend the CTL by creating plugins with Oclif. This section guides you on how to extend the CTL with plugins."}),"\n",(0,o.jsx)(n.h2,{id:"installing-the-command-line-tool",children:"Installing the Command-Line Tool"}),"\n",(0,o.jsx)(n.p,{children:"The CTL comes as an npm package. To install it, you run the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install --location=global @routr/ctl\n"})}),"\n",(0,o.jsx)(n.h2,{id:"using-the-command-line-tool",children:"Using the Command-Line Tool"}),"\n",(0,o.jsx)(n.p,{children:"The CTL includes all the commands you need to interact with your Routr Connect server. Most commands follow a CRUD pattern. For managing your Agents, for instance, you have to create, delete, describe, and get commands."}),"\n",(0,o.jsxs)(n.p,{children:["Most commands adopt the ",(0,o.jsx)(n.code,{children:"{substantive} {verb}"})," pattern. For instance, ",(0,o.jsx)(n.code,{children:"rctl agents get"})," retrieves a list of agents."]}),"\n",(0,o.jsx)(n.p,{children:"If you want to extend the CTL, you create a plugin. Since developers built the CTL with Oclif, you can use the same framework to develop new plugins."}),"\n",(0,o.jsx)(n.h2,{id:"creating-a-plugin",children:"Creating a plugin"}),"\n",(0,o.jsx)(n.p,{children:"To create a new plugin, you start by running the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npx oclif generate mycommand\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The system will prompt you for some information about your plugin. For this example, let's choose ",(0,o.jsx)(n.code,{children:"mycommand"})," as the name."]}),"\n",(0,o.jsx)(n.p,{children:"In your mycommand directory, you'll find the following structure:"}),"\n",(0,o.jsx)(n.p,{children:"[Directory structure omitted for brevity]"}),"\n",(0,o.jsxs)(n.p,{children:["Looking at the ",(0,o.jsx)(n.code,{children:"src/commands/hello/index.ts"})," file, you see the following code:"]}),"\n",(0,o.jsx)(n.p,{children:"[Sample TypeScript code omitted for brevity]"}),"\n",(0,o.jsxs)(n.p,{children:["This code defines a simple command that takes two arguments, ",(0,o.jsx)(n.code,{children:"person"})," and ",(0,o.jsx)(n.code,{children:"from,"})," and then prints a greeting to the console."]}),"\n",(0,o.jsx)(n.p,{children:"After you update your plugin, you install and test it by running the following command from within the plugin directory:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"rctl plugins link . # Installing in development mode\n"})}),"\n",(0,o.jsx)(n.p,{children:"For production mode installation of your plugin, you use the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"rctl plugins install .\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If you have published your plugin to ",(0,o.jsx)(n.a,{href:"https://npmjs.com",children:"NPM"}),", you can install it with this command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"rctl plugins install mycommand\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To see your new command in action, you run the command with the ",(0,o.jsx)(n.code,{children:"--help"})," flag and follow the instructions."]}),"\n",(0,o.jsxs)(n.p,{children:["With this example, you see how straightforward it is to create a new command. You can use the same pattern to create commands for Routr Connect and even utilize the ",(0,o.jsx)(n.a,{href:"/docs/2.0.0/connect/nodesdk/overview",children:"Node.js SDK"})," to interact with the server."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var o=t(6540);const i={},l=o.createContext(i);function s(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);