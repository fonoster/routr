"use strict";(self.webpackChunkroutr_docs=self.webpackChunkroutr_docs||[]).push([[4920],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),u=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return o.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,h=m["".concat(c,".").concat(d)]||m[d]||p[d]||a;return n?o.createElement(h,l(l({ref:t},s),{},{components:n})):o.createElement(h,l({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const a={},l="Extending the Command-Line Tool",i={unversionedId:"development/extending-the-ctl",id:"development/extending-the-ctl",title:"Extending the Command-Line Tool",description:"Routr's command-line tool (CTL) is a powerful tool that lets you manage your Routr Connect server. Our team built the CTL with Oclif, a framework for creating command-line tools in Node.js.",source:"@site/docs/development/extending-the-ctl.md",sourceDirName:"development",slug:"/development/extending-the-ctl",permalink:"/docs/2.0.0/development/extending-the-ctl",draft:!1,editUrl:"https://github.com/fonoster/routr-website/edit/main/docs/development/extending-the-ctl.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom data with the APIServer",permalink:"/docs/2.0.0/development/custom-data-with-the-apiserver"},next:{title:"Introduction",permalink:"/docs/2.0.0/connect/introduction"}},c={},u=[{value:"Installing the Command-Line Tool",id:"installing-the-command-line-tool",level:2},{value:"Using the Command-Line Tool",id:"using-the-command-line-tool",level:2},{value:"Creating a plugin",id:"creating-a-plugin",level:2}],s={toc:u},m="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"extending-the-command-line-tool"},"Extending the Command-Line Tool"),(0,r.kt)("p",null,"Routr's command-line tool (CTL) is a powerful tool that lets you manage your Routr Connect server. Our team built the CTL with ",(0,r.kt)("a",{parentName:"p",href:"https://oclif.io/"},"Oclif"),", a framework for creating command-line tools in Node.js."),(0,r.kt)("p",null,"You can extend the CTL by creating plugins with Oclif. This section guides you on how to extend the CTL with plugins."),(0,r.kt)("h2",{id:"installing-the-command-line-tool"},"Installing the Command-Line Tool"),(0,r.kt)("p",null,"The CTL comes as an npm package. To install it, you run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --location=global @routr/ctl\n")),(0,r.kt)("h2",{id:"using-the-command-line-tool"},"Using the Command-Line Tool"),(0,r.kt)("p",null,"The CTL includes all the commands you need to interact with your Routr Connect server. Most commands follow a CRUD pattern. For managing your Agents, for instance, you have to create, delete, describe, and get commands."),(0,r.kt)("p",null,"Most commands adopt the ",(0,r.kt)("inlineCode",{parentName:"p"},"{substantive} {verb}")," pattern. For instance, ",(0,r.kt)("inlineCode",{parentName:"p"},"rctl agents get")," retrieves a list of agents."),(0,r.kt)("p",null,"If you want to extend the CTL, you create a plugin. Since developers built the CTL with Oclif, you can use the same framework to develop new plugins."),(0,r.kt)("h2",{id:"creating-a-plugin"},"Creating a plugin"),(0,r.kt)("p",null,"To create a new plugin, you start by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx oclif generate mycommand\n")),(0,r.kt)("p",null,"The system will prompt you for some information about your plugin. For this example, let's choose ",(0,r.kt)("inlineCode",{parentName:"p"},"mycommand")," as the name."),(0,r.kt)("p",null,"In your mycommand directory, you'll find the following structure:"),(0,r.kt)("p",null,"[Directory structure omitted for brevity]"),(0,r.kt)("p",null,"Looking at the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/commands/hello/index.ts")," file, you see the following code:"),(0,r.kt)("p",null,"[Sample TypeScript code omitted for brevity]"),(0,r.kt)("p",null,"This code defines a simple command that takes two arguments, ",(0,r.kt)("inlineCode",{parentName:"p"},"person")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"from,")," and then prints a greeting to the console."),(0,r.kt)("p",null,"After you update your plugin, you install and test it by running the following command from within the plugin directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rctl plugins link . # Installing in development mode\n")),(0,r.kt)("p",null,"For production mode installation of your plugin, you use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rctl plugins install .\n")),(0,r.kt)("p",null,"If you have published your plugin to ",(0,r.kt)("a",{parentName:"p",href:"https://npmjs.com"},"NPM"),", you can install it with this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rctl plugins install mycommand\n")),(0,r.kt)("p",null,"To see your new command in action, you run the command with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--help")," flag and follow the instructions."),(0,r.kt)("p",null,"With this example, you see how straightforward it is to create a new command. You can use the same pattern to create commands for Routr Connect and even utilize the ",(0,r.kt)("a",{parentName:"p",href:"/docs/2.0.0/connect/nodesdk/sdk"},"Node.js SDK")," to interact with the server."))}p.isMDXComponent=!0}}]);