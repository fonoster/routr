"use strict";(self.webpackChunkroutr_docs=self.webpackChunkroutr_docs||[]).push([[4860],{5028:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"2.11.5","banner":null,"badge":true,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Overview","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/2.11.5/overview/introduction","docId":"overview/introduction","unlisted":false},{"type":"link","label":"Architecture","href":"/docs/2.11.5/overview/architecture","docId":"overview/architecture","unlisted":false},{"type":"link","label":"Concepts","href":"/docs/2.11.5/overview/concepts","docId":"overview/concepts","unlisted":false},{"type":"link","label":"Deploy with Docker","href":"/docs/2.11.5/overview/deploy-with-docker","docId":"overview/deploy-with-docker","unlisted":false}]},{"type":"category","label":"Development","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/2.11.5/development/introduction","docId":"development/introduction","unlisted":false},{"type":"link","label":"Quick Start","href":"/docs/2.11.5/development/quick-start","docId":"development/quick-start","unlisted":false},{"type":"link","label":"Development with Gitpod","href":"/docs/2.11.5/development/development-mode-with-gitpod","docId":"development/development-mode-with-gitpod","unlisted":false},{"type":"category","label":"Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/2.11.5/development/components/overview","docId":"development/components/overview","unlisted":false},{"type":"link","label":"EdgePort","href":"/docs/2.11.5/development/components/edgeport","docId":"development/components/edgeport","unlisted":false},{"type":"link","label":"Message Dispatcher","href":"/docs/2.11.5/development/components/dispatcher","docId":"development/components/dispatcher","unlisted":false},{"type":"link","label":"Location Service","href":"/docs/2.11.5/development/components/location","docId":"development/components/location","unlisted":false},{"type":"link","label":"Registry Service","href":"/docs/2.11.5/development/components/registry","docId":"development/components/registry","unlisted":false},{"type":"link","label":"Requester","href":"/docs/2.11.5/development/components/requester","docId":"development/components/requester","unlisted":false},{"type":"link","label":"RTPRelay","href":"/docs/2.11.5/development/components/rtprelay","docId":"development/components/rtprelay","unlisted":false},{"type":"link","label":"APIServer","href":"/docs/2.11.5/development/components/apiserver","docId":"development/components/apiserver","unlisted":false},{"type":"link","label":"SimpleAuth Service","href":"/docs/2.11.5/development/components/simpleauth","docId":"development/components/simpleauth","unlisted":false}]},{"type":"category","label":"Alterations API","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/2.11.5/development/alterations/overview","docId":"development/alterations/overview","unlisted":false},{"type":"link","label":"Alteration Methods","href":"/docs/2.11.5/development/alterations/methods","docId":"development/alterations/methods","unlisted":false}]},{"type":"link","label":"Building a Processor","href":"/docs/2.11.5/development/building-a-processor","docId":"development/building-a-processor","unlisted":false},{"type":"link","label":"Building a Middleware","href":"/docs/2.11.5/development/building-a-middleware","docId":"development/building-a-middleware","unlisted":false},{"type":"link","label":"Custom data with the APIServer","href":"/docs/2.11.5/development/custom-data-with-the-apiserver","docId":"development/custom-data-with-the-apiserver","unlisted":false},{"type":"link","label":"Extending the Command-Line Tool","href":"/docs/2.11.5/development/extending-the-ctl","docId":"development/extending-the-ctl","unlisted":false}]},{"type":"category","label":"Connect Mode","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/2.11.5/connect/introduction","docId":"connect/introduction","unlisted":false},{"type":"link","label":"Concepts","href":"/docs/2.11.5/connect/concepts","docId":"connect/concepts","unlisted":false},{"type":"category","label":"Quick Start","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Docker installation","href":"/docs/2.11.5/connect/quick-start/docker","docId":"connect/quick-start/docker","unlisted":false},{"type":"link","label":"Installing in Kubernetes","href":"/docs/2.11.5/connect/quick-start/kubernetes","docId":"connect/quick-start/kubernetes","unlisted":false}]},{"type":"category","label":"Command-Line Tool","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/2.11.5/connect/command-line/overview","docId":"connect/command-line/overview","unlisted":false},{"type":"link","label":"CTL","href":"/docs/2.11.5/connect/command-line/ctl","docId":"connect/command-line/ctl","unlisted":false}]},{"type":"category","label":"Node.js SDK","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/2.11.5/connect/nodesdk/overview","docId":"connect/nodesdk/overview","unlisted":false},{"type":"link","label":"SDK","href":"/docs/2.11.5/connect/nodesdk/sdk","docId":"connect/nodesdk/sdk","unlisted":false}]},{"type":"link","label":"Home or Office Setup","href":"/docs/2.11.5/connect/home-or-office-setup","docId":"connect/home-or-office-setup","unlisted":false},{"type":"link","label":"WebRTC Support","href":"/docs/2.11.5/connect/webrtc-support","docId":"connect/webrtc-support","unlisted":false},{"type":"link","label":"Securing the Server","href":"/docs/2.11.5/connect/securing-the-server","docId":"connect/securing-the-server","unlisted":false},{"type":"link","label":"Sending Call Events to NATS","href":"/docs/2.11.5/connect/sending-call-events-to-nats","docId":"connect/sending-call-events-to-nats","unlisted":false}]},{"type":"link","label":"Community","href":"/docs/2.11.5/community","docId":"community","unlisted":false},{"type":"link","label":"Contributing Guide","href":"/docs/2.11.5/contributing","docId":"contributing","unlisted":false},{"type":"link","label":"FAQs","href":"/docs/2.11.5/faqs","docId":"faqs","unlisted":false},{"type":"link","label":"Changelog","href":"/docs/2.11.5/changelog","docId":"changelog","unlisted":false}]},"docs":{"changelog":{"id":"changelog","title":"Changelog","description":"Coming soon.","sidebar":"tutorialSidebar"},"community":{"id":"community","title":"Community","description":"We are developing Routr in the open. These are the channels we use for communication and contribution:","sidebar":"tutorialSidebar"},"connect/command-line/ctl":{"id":"connect/command-line/ctl","title":"CTL","description":"Command-Line for Routr server.","sidebar":"tutorialSidebar"},"connect/command-line/overview":{"id":"connect/command-line/overview","title":"Overview","description":"The command-line tool contains all commands you will need to manage your Routr Connect server.","sidebar":"tutorialSidebar"},"connect/concepts":{"id":"connect/concepts","title":"Concepts","description":"The Connect Mode is Routr\'s implementation of the SIPConnect standard. Routr introduces the Connect Processor and five routing types as part of the implementation.","sidebar":"tutorialSidebar"},"connect/home-or-office-setup":{"id":"connect/home-or-office-setup","title":"Home or Office Setup","description":"Coming soon.","sidebar":"tutorialSidebar"},"connect/introduction":{"id":"connect/introduction","title":"Introduction","description":"The Connect Mode, sometimes called Routr Connect, is our implementation of the SIPConnect standard. The Connect Mode describes SIP routing in terms of Agents, Peers, Trunks, Numbers, Credentials, and ACL. It is the most common way to deploy Routr.","sidebar":"tutorialSidebar"},"connect/nodesdk/overview":{"id":"connect/nodesdk/overview","title":"Overview","description":"Node.js SDK is a library that you can use to manage your Routr Connect server. It is available as an npm package that allows you to create, read, update, and delete (CRUD) resources in your server.","sidebar":"tutorialSidebar"},"connect/nodesdk/sdk":{"id":"connect/nodesdk/sdk","title":"SDK","description":"* Installation","sidebar":"tutorialSidebar"},"connect/quick-start/docker":{"id":"connect/quick-start/docker","title":"Docker installation","description":"First, create a directory named \\"routr\\". Navigate into the new folder, and then copy the content below:","sidebar":"tutorialSidebar"},"connect/quick-start/kubernetes":{"id":"connect/quick-start/kubernetes","title":"Installing in Kubernetes","description":"Routr can be installed in Kubernetes using Helm. The following instructions assume that you have a Kubernetes cluster up and running.","sidebar":"tutorialSidebar"},"connect/securing-the-server":{"id":"connect/securing-the-server","title":"Securing the Server","description":"Coming soon.","sidebar":"tutorialSidebar"},"connect/sending-call-events-to-nats":{"id":"connect/sending-call-events-to-nats","title":"Sending Call Events to NATS","description":"Routr ships with a NATS publisher that can be used to send call events to a NATS server. Call events are a function of the EdgePort. To enable the NATS publisher, you will need to update your EdgePort service to set the environment variable NATSPUBLISHERENABLED to true as well as the environment variable NATSPUBLISHERURL to the URL of your NATS server. For example:","sidebar":"tutorialSidebar"},"connect/webrtc-support":{"id":"connect/webrtc-support","title":"WebRTC Support","description":"The Connect Processor supports interoperability with WebRTC clients. This means that you can use any SIP client that also supports WebRTC to make and receive calls, such as with the JavaScript libraries SIP.js and JsSIP for example. However, because WebRTC mandates the use of specific codecs, transport protocols, and a certain version of RTP that might differ from those used by legacy SIP clients, you will need to make additional configuration changes to your server.","sidebar":"tutorialSidebar"},"contributing":{"id":"contributing","title":"Contributing Guide","description":"* New Contributor Guide","sidebar":"tutorialSidebar"},"development/alterations/methods":{"id":"development/alterations/methods","title":"Alteration Methods","description":"Coming soon.","sidebar":"tutorialSidebar"},"development/alterations/overview":{"id":"development/alterations/overview","title":"Overview","description":"Coming soon.","sidebar":"tutorialSidebar"},"development/building-a-chat-application":{"id":"development/building-a-chat-application","title":"Building a Chat Application","description":"Comin soon."},"development/building-a-middleware":{"id":"development/building-a-middleware","title":"Building a Middleware","description":"Building a Middleware is the same as building a Processor. Both share the same protobuf definition. Please refer to the Concepts Overview for more information on the differences between a Processor and a Middleware.","sidebar":"tutorialSidebar"},"development/building-a-processor":{"id":"development/building-a-processor","title":"Building a Processor","description":"Processors are how we extend the signaling functionality of Routr. Processors are where we can add new SIP headers, modify existing ones, add endpoints to the Location Service, etc. Processors are implemented as gRPC services and use the Alterations API to modify SIP messages. A Processor is the last stop for a SIP message before it is sent out to the network.","sidebar":"tutorialSidebar"},"development/building-a-scaip-processor":{"id":"development/building-a-scaip-processor","title":"Building a SCAIP Processor","description":"Comin soon."},"development/components/apiserver":{"id":"development/components/apiserver","title":"APIServer","description":"The APIServer is an optional component that can be used to describe a VoIP network in terms of Domains, Agents, Trunks, Numbers, and Peers. The data is stored in a PostgreSQL database and is accessed by other components via gRPC.","sidebar":"tutorialSidebar"},"development/components/dispatcher":{"id":"development/components/dispatcher","title":"Message Dispatcher","description":"The Message Dispatcher, or Dispatcher for short, is a component responsible for receiving messages from the EdgePort and routing them to the appropriate Processor and Middleware.","sidebar":"tutorialSidebar"},"development/components/edgeport":{"id":"development/components/edgeport","title":"EdgePort","description":"The EdgePort component accepts SIP Messages, parses them into protobuf, and sends them to the Message Dispatcher. After a SIP Message is processed, the EdgePort will forward the SIP Message to the next hop.","sidebar":"tutorialSidebar"},"development/components/location":{"id":"development/components/location","title":"Location Service","description":"In Routr, the Location Service serves two primary purposes. The first purpose is to locate the route to an endpoint in the location table. The second is to load balance requests.","sidebar":"tutorialSidebar"},"development/components/overview":{"id":"development/components/overview","title":"Overview","description":"This is the components sub-section of the development section. Here you will find information about the different components that make up the platform. Each component will have its own page with information about how to run it, how to configure it, and how to use it.","sidebar":"tutorialSidebar"},"development/components/registry":{"id":"development/components/registry","title":"Registry Service","description":"The Registry component sends outbound registration to trunking services. The service will activate for Trunks with the spec.sendRegister field set to true. The Registry service relies on the Requester service to send requests to the EdgePort.","sidebar":"tutorialSidebar"},"development/components/requester":{"id":"development/components/requester","title":"Requester","description":"The Requester service is an optional service used when you want to reach an EdgePort using gRPC instead of SIP. As of the release of this publication, we only use this component when the network needs a Registry Service. However, this may change in the future, so be sure to check in to see if there are any other potential uses.","sidebar":"tutorialSidebar"},"development/components/rtprelay":{"id":"development/components/rtprelay","title":"RTPRelay","description":"The RTPRelay is an optional middleware service that can control RTPEngine instances. The RTPRelay component enables interoperability between WebRTC-based clients, such as SIP.js, and legacy SIP clients. Another use case for the RTPRelay is to help SIP clients who cannot send and receive media directly.","sidebar":"tutorialSidebar"},"development/components/simpleauth":{"id":"development/components/simpleauth","title":"SimpleAuth Service","description":"The SimpleAuth component is an optional middleware service to authenticate SIP requests in Routr. The SimpleAuth is ideal for testing and small deployments.","sidebar":"tutorialSidebar"},"development/custom-data-with-the-apiserver":{"id":"development/custom-data-with-the-apiserver","title":"Custom data with the APIServer","description":"Whether you run the Routr Connect distribution or build a custom Processor, you can store custom data with the APIServer.","sidebar":"tutorialSidebar"},"development/development-mode-with-gitpod":{"id":"development/development-mode-with-gitpod","title":"Development with Gitpod","description":"Development mode with Gitpod is a great way to get familiar with Routr. Gitpod is a cloud-based IDE that allows you to develop and test your code in a browser. Gitpod is free for open-source projects and offers a free trial for private repositories.","sidebar":"tutorialSidebar"},"development/extending-the-ctl":{"id":"development/extending-the-ctl","title":"Extending the Command-Line Tool","description":"Routr\'s command-line tool (CTL) is a powerful tool that lets you manage your Routr Connect server. Our team built the CTL with Oclif, a framework for creating command-line tools in Node.js.","sidebar":"tutorialSidebar"},"development/introduction":{"id":"development/introduction","title":"Introduction","description":"Developers and implementors looking to customize Routr for their specific use cases should refer to this section. Here, you\'ll learn about the core components, their interactions, and the steps to create custom Processors and Middleware.","sidebar":"tutorialSidebar"},"development/metrics-events-logs-and-traces":{"id":"development/metrics-events-logs-and-traces","title":"Everything about MELT","description":"Comin soon."},"development/orchestration-with-docker":{"id":"development/orchestration-with-docker","title":"Orchestration with Docker","description":"Coming soon."},"development/orchestration-with-kubernetes":{"id":"development/orchestration-with-kubernetes","title":"Orchestration with Kubernetes","description":"Coming soon."},"development/quick-start":{"id":"development/quick-start","title":"Quick Start","description":"Before starting the development, you need to install the following tools:","sidebar":"tutorialSidebar"},"development/testing-with-seet":{"id":"development/testing-with-seet","title":"Testing with SEET","description":"Coming soon."},"faqs":{"id":"faqs","title":"FAQs","description":"What is Routr?","sidebar":"tutorialSidebar"},"overview/architecture":{"id":"overview/architecture","title":"Architecture","description":"Routr\'s architecture diagram","sidebar":"tutorialSidebar"},"overview/concepts":{"id":"overview/concepts","title":"Concepts","description":"Routr\'s approach to SIP is different from other SIP servers. For example, Routr aims to be cloud-native first. It is designed to run in a containerized environment, like Docker or Kubernetes, and features a microservices architecture.","sidebar":"tutorialSidebar"},"overview/deploy-with-docker":{"id":"overview/deploy-with-docker","title":"Deploy with Docker","description":"Deploying Routr with Docker is the easiest way to get started. This guide will walk you through the process of deploying Routr with Docker.","sidebar":"tutorialSidebar"},"overview/introduction":{"id":"overview/introduction","title":"introduction","description":"Community banner","sidebar":"tutorialSidebar"},"tutorials/deploying-to-civo-with-helm":{"id":"tutorials/deploying-to-civo-with-helm","title":"Deploying to Civo with Helm","description":"Coming soon."},"tutorials/ephemeral-agents-in-the-browser":{"id":"tutorials/ephemeral-agents-in-the-browser","title":"Ephemeral Agents in the Browser","description":"Coming soon."},"tutorials/intercom-system-with-routr-and-kubernetes":{"id":"tutorials/intercom-system-with-routr-and-kubernetes","title":"Intercom System with Routr and Kubernetes","description":"Coming soon."},"tutorials/load-balancing-asterisk-with-routr":{"id":"tutorials/load-balancing-asterisk-with-routr","title":"Load-balancing Asterisk with Routr","description":"Coming soon."}}}}')}}]);