"use strict";(self.webpackChunkroutr_docs=self.webpackChunkroutr_docs||[]).push([[1703],{8809:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"development/components/simpleauth","title":"SimpleAuth Service","description":"The SimpleAuth component is an optional middleware service to authenticate SIP requests in Routr. The SimpleAuth is ideal for testing and small deployments.","source":"@site/docs/development/components/simpleauth.md","sourceDirName":"development/components","slug":"/development/components/simpleauth","permalink":"/docs/2.11.5/development/components/simpleauth","draft":false,"unlisted":false,"editUrl":"https://github.com/fonoster/routr/edit/main/docs/docs/docs/development/components/simpleauth.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"APIServer","permalink":"/docs/2.11.5/development/components/apiserver"},"next":{"title":"Overview","permalink":"/docs/2.11.5/development/alterations/overview"}}');var o=t(4848),r=t(8453);const i={},a="SimpleAuth Service",c={},l=[{value:"Configuration Spec",id:"configuration-spec",level:2},{value:"Communication and Protobuf Spec",id:"communication-and-protobuf-spec",level:2},{value:"Launching the SimpleAuth with Docker",id:"launching-the-simpleauth-with-docker",level:2},{value:"Quick Test with gRPCurl",id:"quick-test-with-grpcurl",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"simpleauth-service",children:"SimpleAuth Service"})}),"\n",(0,o.jsx)(n.p,{children:"The SimpleAuth component is an optional middleware service to authenticate SIP requests in Routr. The SimpleAuth is ideal for testing and small deployments."}),"\n",(0,o.jsx)(n.h2,{id:"configuration-spec",children:"Configuration Spec"}),"\n",(0,o.jsx)(n.p,{children:"The SimpleAuth provides the following environment variables for configuration:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"BIND_ADDR"})," - The address where the service will listen for gRPC requests. Default: ",(0,o.jsx)(n.code,{children:"0.0.0.0:51903"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ALLOWLIST"})," - A comma-separated list of Users allowed to bypass authentication"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"METHODS"})," - A comma-separated list of SIP methods that require authentication (e.g., ",(0,o.jsx)(n.code,{children:"INVITE, REGISTER, MESSAGE"}),"). Required."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"PATH_TO_AUTH"})," - The path to a file containing the credentials for the users"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Example of the authentication file:"}),"\n",(0,o.jsxs)(n.p,{children:["Filename ",(0,o.jsx)(n.code,{children:"auth.json"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'[\n  { \n    "username": "1001", \n    "secret": "1234" \n  },\n  { \n    "username": "john",\n    "secret": "1234" \n  }\n]\n'})}),"\n",(0,o.jsx)(n.h2,{id:"communication-and-protobuf-spec",children:"Communication and Protobuf Spec"}),"\n",(0,o.jsx)(n.p,{children:"The Message Dispatcher communicates SimpleAuth service using gRPC. The SimpleAuth, in turn, authenticates SIP requests and forwards them if the request is valid."}),"\n",(0,o.jsx)(n.p,{children:"The following is the protobuf definition for the SimpleAuth service:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:'\n```protobuf\nsyntax = "proto3";\n\npackage fonoster.routr.processor.v2beta1;\n\nimport "common.proto";\nimport "sipmessage.proto";\n\n// Processor service\nservice Processor {\n  // Process Message Request\n  rpc ProcessMessage (MessageRequest) returns (MessageResponse) {}\n}\n\nenum Method {\n  UNKNOWN = 0;\n  // Communicates user location (hostname, IP)\n  REGISTER = 1;\n  // Establishes a session\n  INVITE = 2;\n  // Transports Instant Messages\n  MESSAGE = 3;\n  // Publishes an event to the Server\n  PUBLISH = 4;\n  // Notifies the subscriber of a new event\n  NOTIFY = 5;\n  // Subscribes for Notification from the notifier\n  SUBSCRIBE = 6;\n  // Confirms an INVITE request\n  ACK = 7;\n  // Terminates a session\n  BYE = 8;\n  // Cancels establishing of a session\n  CANCEL = 9;\n  // Communicates information about the capabilities of calling and receiving SIP phones\n  OPTIONS = 10;\n  // Provisional Acknowledgement\n  PRACK = 11;\n  // Sends mid-session information\n  INFO = 12;\n  // Asks the recipient to issue a call transfer\n  REFER = 13;\n  // Modifies the state of a session\n  UPDATE = 14;\n}\n\nmessage NetInterface {\n  string host = 1;\n  int32 port = 2;\n  fonoster.routr.common.v2beta1.Transport transport = 3;\n}\n\nmessage MessageRequest {\n  // Same as the Call-Id header \n  string ref = 1;\n  string edge_port_ref = 2;\n  Method method = 3;\n  NetInterface sender = 4;\n  repeated NetInterface listening_points = 5;\n  repeated string external_addrs = 6;\n  repeated string localnets = 7;\n  fonoster.routr.sipmessage.v2beta1.SIPMessage message = 8;\n  map<string, string> metadata = 9;\n}\n\nmessage MessageResponse {\n  NetInterface sender = 1;\n  fonoster.routr.sipmessage.v2beta1.SIPMessage message = 2;\n  map<string, string> metadata = 3;\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Link to the ",(0,o.jsx)(n.a,{href:"https://github.com/fonoster/routr/blob/main/mods/common/src/protos/processor.proto",children:"protobuf definition."})]}),"\n",(0,o.jsx)(n.h2,{id:"launching-the-simpleauth-with-docker",children:"Launching the SimpleAuth with Docker"}),"\n",(0,o.jsxs)(n.p,{children:["The SimpleAuth is available as a Docker image from ",(0,o.jsx)(n.a,{href:"https://hub.docker.com/r/fonoster/routr-simpleauth",children:"Docker Hub"}),". To launch the SimpleAuth with Docker, you can use the following command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker run -it \\\n  -p 51903:51903 \\\n  -e ALLOWLIST=anonymous,1001 \\\n  -e METHODS=INVITE,REGISTER,MESSAGE \\\n  -e PATH_TO_AUTH=/path/to/auth.json \\\n  -v /path/to/auth.json:/path/to/auth.json \\\n  fonoster/routr-simpleauth\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The previous example will pull the latest version of the SimpleAuth from Docker Hub and launch the service. The service will listen on the default port, ",(0,o.jsx)(n.code,{children:"51903"}),", for gRPC requests. Remember, your Docker container must expose the service's ports, too."]}),"\n",(0,o.jsx)(n.h2,{id:"quick-test-with-grpcurl",children:"Quick Test with gRPCurl"}),"\n",(0,o.jsxs)(n.p,{children:["One easy way to interact with SimpleAuth for testing and development is to use ",(0,o.jsx)(n.a,{href:"https://github.com/fullstorydev/grpcurl",children:"gRPCurl"}),". The following example shows how to send a SIP Message to the SimpleAuth."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"grpcurl -plaintext \\\n  -import-path /path/to/protos \\\n  -proto processor.proto  -d '{...}' \\\n  localhost:51901 \\\n  fonoster.routr.processor.v2beta1.Processor/ProcessMessage\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);