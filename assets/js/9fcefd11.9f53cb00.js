"use strict";(self.webpackChunkroutr_docs=self.webpackChunkroutr_docs||[]).push([[8389],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2357:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={},l="Quick Start",i={unversionedId:"development/quick-start",id:"development/quick-start",title:"Quick Start",description:"Before starting the development, you need to install the following tools:",source:"@site/docs/development/quick-start.md",sourceDirName:"development",slug:"/development/quick-start",permalink:"/docs/2.0.0/development/quick-start",draft:!1,editUrl:"https://github.com/fonoster/routr-website/edit/main/docs/development/quick-start.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/2.0.0/development/introduction"},next:{title:"Introduction",permalink:"/docs/2.0.0/connect/introduction"}},s={},c=[{value:"Clone and Build the Project",id:"clone-and-build-the-project",level:2},{value:"Run the Project",id:"run-the-project",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quick-start"},"Quick Start"),(0,o.kt)("p",null,"Before starting the development, you need to install the following tools:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"NodeJS (>=16.14)"),(0,o.kt)("li",{parentName:"ul"},"JDK (>=11)")),(0,o.kt)("p",null,"For NodeJS, we recommend using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nvm-sh/nvm"},"nvm")," to manage your NodeJS versions."),(0,o.kt)("h2",{id:"clone-and-build-the-project"},"Clone and Build the Project"),(0,o.kt)("p",null,"To get started, first, clone the repository:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/fonoster/routr\n")),(0,o.kt)("p",null,"The previous command will create a directory called ",(0,o.kt)("inlineCode",{parentName:"p"},"routr")," with the project's source code. "),(0,o.kt)("p",null,"Next, set the JAVA_HOME environment variable to the location of your JDK installation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export JAVA_HOME=/path/to/jdk\n")),(0,o.kt)("p",null,"Finally, build the project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd routr\nnpm run make\n")),(0,o.kt)("p",null,"The previous command will install all the dependencies and build the project. If everything goes well, you should see no errors."),(0,o.kt)("h2",{id:"run-the-project"},"Run the Project"),(0,o.kt)("p",null,"To run all the components, you can use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start\n")),(0,o.kt)("p",null,"The previous command will start the EdgePort, Location Service, MessageDispatcher, Connect Processor, Requester, APIServer (simpledata), and Registry. "),(0,o.kt)("p",null,"As you change the source code, Nodemon will automatically restart the components except for the EdgePort and Requester, which are written in Java and require a manual build and restart."),(0,o.kt)("p",null,"You also have the option to run each component individually. For example, if your use case only requires the EdgePort and the Location Service, you can run the following command:"),(0,o.kt)("p",null,"In one terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start:edgeport\n")),(0,o.kt)("p",null,"Example output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"> start:edgeport\n> cross-env NODE_ENV=dev LOGS_LEVEL=verbose ./mods/edgeport/edgeport.sh\n\n2023-09-22 12:40:48.454 [info]: (edgeport) GRPCSipListener.java starting edgeport ref = edgeport-01 at 0.0.0.0\n2023-09-22 12:40:48.455 [info]: (edgeport) GRPCSipListener.java localnets list [127.0.0.1/8,10.111.221.2/24]\n2023-09-22 12:40:48.456 [info]: (edgeport) GRPCSipListener.java external hosts list [10.111.220.2,sip01.edgeport.net]\n2023-09-22 12:40:48.578 [info]: (edgeport) HealthCheck.java starting health check on port 8080 and endpoint /healthz\n")),(0,o.kt)("p",null,"In a separate terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start:location\n")),(0,o.kt)("p",null,"Example output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'> start:location\n> cross-env NODE_ENV=dev LOGS_LEVEL=verbose CONFIG_PATH=$(pwd)/config/location.yaml nodemon mods/location/src/runner\n\n[nodemon] 2.0.20\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): mods/**/*\n[nodemon] watching extensions: ts\n[nodemon] starting `ts-node mods/location/src/runner.ts`\n2023-09-05 12:41:38.733 [verbose]: (grpc-health-check) /node_modules/@fonoster/grpc-health-check/dist/add-health-to-server.js added healthcheck service {}\n2023-09-05 12:41:38.735 [info]: (location) /mods/location/src/service.ts using memory as cache provider {}\n2023-09-05 12:41:38.739 [info]: (common) /mods/common/dist/service.js starting routr service {"name":"location","bindAddr":"0.0.0.0:51902"}\n')),(0,o.kt)("p",null,"Please see the ",(0,o.kt)("inlineCode",{parentName:"p"},"scripts")," section of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/fonoster/routr/blob/main/package.json"},"package.json")," for a complete list of available commands."))}d.isMDXComponent=!0}}]);