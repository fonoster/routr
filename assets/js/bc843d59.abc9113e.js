"use strict";(self.webpackChunkroutr_docs=self.webpackChunkroutr_docs||[]).push([[1996],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(r),c=a,g=u["".concat(s,".").concat(c)]||u[c]||m[c]||o;return r?n.createElement(g,i(i({ref:t},d),{},{components:r})):n.createElement(g,i({ref:t},d))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},9655:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={},i="Registry Service",l={unversionedId:"development/components/registry",id:"development/components/registry",title:"Registry Service",description:"The Registry component sends outbound registration to trunking services. The service will activate for Trunks with the spec.sendRegister field set to true. The Registry service relies on the Requester service to send requests to the EdgePort.",source:"@site/docs/development/components/registry.md",sourceDirName:"development/components",slug:"/development/components/registry",permalink:"/docs/2.0.0/development/components/registry",draft:!1,editUrl:"https://github.com/fonoster/routr-website/edit/main/docs/development/components/registry.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Location Service",permalink:"/docs/2.0.0/development/components/location"},next:{title:"Requester",permalink:"/docs/2.0.0/development/components/requester"}},s={},p=[{value:"Configuration Spec",id:"configuration-spec",level:2},{value:"Communication and Protobuf Spec",id:"communication-and-protobuf-spec",level:2},{value:"Launching the Registry Service with Docker",id:"launching-the-registry-service-with-docker",level:2}],d={toc:p},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"registry-service"},"Registry Service"),(0,a.kt)("p",null,"The Registry component sends outbound registration to trunking services. The service will activate for Trunks with the ",(0,a.kt)("inlineCode",{parentName:"p"},"spec.sendRegister")," field set to true. The Registry service relies on the Requester service to send requests to the EdgePort."),(0,a.kt)("h2",{id:"configuration-spec"},"Configuration Spec"),(0,a.kt)("p",null,"To configure the Registry Service, you must provide a YAML or JSON configuration with the following structure."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"requesterAddr")),(0,a.kt)("td",{parentName:"tr",align:null},"Address of service to send requests"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"apiAddr")),(0,a.kt)("td",{parentName:"tr",align:null},"Address of API service"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"registerInterval")),(0,a.kt)("td",{parentName:"tr",align:null},"Interval for sending registration requests (Defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"60s"),")"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"cache")),(0,a.kt)("td",{parentName:"tr",align:null},"Cache configuration"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"cache.provider")),(0,a.kt)("td",{parentName:"tr",align:null},"Accepts either ",(0,a.kt)("inlineCode",{parentName:"td"},"memory")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"redis")),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"cache.parameters")),(0,a.kt)("td",{parentName:"tr",align:null},"Comma-separated key-value pairs"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"methods")),(0,a.kt)("td",{parentName:"tr",align:null},"Acceptable SIP Methods (reserved for future use)"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"edgePorts")),(0,a.kt)("td",{parentName:"tr",align:null},"List of EdgePorts for outbound registrations"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"edgePorts.address")),(0,a.kt)("td",{parentName:"tr",align:null},"Address of EdgePort"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"edgePorts.region")),(0,a.kt)("td",{parentName:"tr",align:null},"Region of EdgePort (reserved for future use)"),(0,a.kt)("td",{parentName:"tr",align:null},"No")))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"cache.parameters")," property is only needed if you are using the Redis provider. "),(0,a.kt)("p",null,"The following table shows the available parameters for the Redis provider."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"username")),(0,a.kt)("td",{parentName:"tr",align:null},"Username (if required by Redis)"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"password")),(0,a.kt)("td",{parentName:"tr",align:null},"Password (if required by Redis)"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"host")),(0,a.kt)("td",{parentName:"tr",align:null},"Redis host (Defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"localhost"),")"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"port")),(0,a.kt)("td",{parentName:"tr",align:null},"Redis port (Defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"6379"),")"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"secure")),(0,a.kt)("td",{parentName:"tr",align:null},"Use secure connection for Redis"),(0,a.kt)("td",{parentName:"tr",align:null},"No")))),(0,a.kt)("p",null,"Here is an example of a configuration file:"),(0,a.kt)("p",null,"Filename: ",(0,a.kt)("inlineCode",{parentName:"p"},"registry.yaml")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"registry.json")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"kind: Registry\napiVersion: v2beta1\nspec:\n  requesterAddr: requester:51909\n  apiAddr: apiserver:51907\n  cache:\n    provider: memory\n  methods:\n    - INVITE\n    - MESSAGE\n  edgePorts:\n    - address: sip01.edgeport.net:5060\n      region: us-east1\n    - address: sip02.edgeport.net:6060\n")),(0,a.kt)("h2",{id:"communication-and-protobuf-spec"},"Communication and Protobuf Spec"),(0,a.kt)("p",null,"The registry communicates with the Requester service using gRPC. The Requester, in turn, communicates with the EdgePort using SIP. The contract for communication with the Requester service is defined in the following protobuf:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\n\npackage fonoster.routr.requester.v2beta1;\n\nimport "common.proto";\nimport "sipmessage.proto";\nimport "processor.proto";\n\n// Requester service\nservice Requester {\n  // Send Message Request\n  rpc SendMessage (SendMessageRequest) returns (SendMessageResponse) {}\n}\n\nmessage SendMessageRequest {\n  string target = 1;\n  fonoster.routr.processor.v2beta1.Method method = 2;\n  fonoster.routr.common.v2beta1.Transport transport = 3;\n  fonoster.routr.sipmessage.v2beta1.SIPMessage message = 4;\n}\n\nmessage SendMessageResponse {\n  fonoster.routr.sipmessage.v2beta1.SIPMessage message = 1;\n}\n')),(0,a.kt)("p",null,"Link to the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/fonoster/routr/blob/main/mods/common/src/protos/requester.proto"},"protobuf definition.")),(0,a.kt)("h2",{id:"launching-the-registry-service-with-docker"},"Launching the Registry Service with Docker"),(0,a.kt)("p",null,"The Registry Service is available as a Docker image from ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/fonoster/routr-registry"},"Docker Hub"),". To launch the Registry Service with Docker, you can use the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -it -v $(pwd)/registry.yaml:/etc/routr/registry.yaml fonoster/routr-registry\n")),(0,a.kt)("p",null,"The previous example will pull the latest version of the Registry Service from Docker Hub and launch it with the default configuration. The Registry Service will connect to the Requester service using the address ",(0,a.kt)("inlineCode",{parentName:"p"},"requester:51909")," and the API service using the address ",(0,a.kt)("inlineCode",{parentName:"p"},"apiserver:51907"),"."))}m.isMDXComponent=!0}}]);